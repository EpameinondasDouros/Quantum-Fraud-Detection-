{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM549V4xpNh3Yf9Nt1fJXjy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Implementation Plan\n","Simulate the Nodes and Weights:\n","\n","Generate random weight matrices (Wi) for N nodes.\n","Use PyTorch tensors to represent these matrices.\n","Global Model Computation:\n","\n","Collect all Wi from the nodes.\n","Compute the global average matrix\n","ùê∫\n","=\n","‚àë\n","ùëä\n","ùëñ\n","ùëÅ\n","G=\n","N\n","‚àëW\n","i\n","‚Äã\n","\n","‚Äã\n"," .\n","Secure Communication Simulation:\n","\n","Encrypt and decrypt matrices during communication. For simplicity, we can use a mock encryption method (e.g., encoding and decoding with a transformation).\n","Redistribute Gi:\n","\n","Send the global matrix Gi back to the nodes."],"metadata":{"id":"o1N730rLkXXr"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NMt-NBCHjon3","executionInfo":{"status":"ok","timestamp":1732035322787,"user_tz":-120,"elapsed":5519,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"b88fc053-2bc3-4dd9-baab-7e427eddbc1a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Original Node Weights:\n","Node 1 weights:\n","tensor([[0.2044, 0.9344, 0.1575],\n","        [0.9659, 0.2901, 0.5061],\n","        [0.6747, 0.5774, 0.3427]])\n","\n","Node 2 weights:\n","tensor([[0.0682, 0.3799, 0.5668],\n","        [0.0457, 0.6687, 0.5804],\n","        [0.0449, 0.7814, 0.9806]])\n","\n","Node 3 weights:\n","tensor([[0.3741, 0.9110, 0.5826],\n","        [0.7928, 0.1837, 0.8022],\n","        [0.1995, 0.4681, 0.3223]])\n","\n","Node 4 weights:\n","tensor([[0.3617, 0.3389, 0.2374],\n","        [0.7227, 0.5118, 0.2521],\n","        [0.2684, 0.9616, 0.4818]])\n","\n","Node 5 weights:\n","tensor([[0.4122, 0.1662, 0.2253],\n","        [0.4030, 0.6935, 0.7853],\n","        [0.1483, 0.8260, 0.9351]])\n","\n","Node 6 weights:\n","tensor([[0.7935, 0.9256, 0.3470],\n","        [0.8952, 0.1676, 0.1813],\n","        [0.3461, 0.6130, 0.6325]])\n","\n","Node 7 weights:\n","tensor([[0.1420, 0.1161, 0.0562],\n","        [0.7526, 0.6803, 0.9575],\n","        [0.8786, 0.6450, 0.1103]])\n","\n","Node 8 weights:\n","tensor([[0.1889, 0.8839, 0.7712],\n","        [0.8217, 0.5710, 0.9121],\n","        [0.3690, 0.2042, 0.1199]])\n","\n","Node 9 weights:\n","tensor([[0.7763, 0.4124, 0.1914],\n","        [0.9141, 0.2629, 0.3303],\n","        [0.0905, 0.5692, 0.9456]])\n","\n","Node 10 weights:\n","tensor([[0.0346, 0.0691, 0.2083],\n","        [0.5217, 0.8545, 0.7953],\n","        [0.6598, 0.1256, 0.6449]])\n","\n","Node 11 weights:\n","tensor([[0.4336, 0.0369, 0.2997],\n","        [0.1900, 0.9001, 0.2241],\n","        [0.5645, 0.4824, 0.9928]])\n","\n","Node 12 weights:\n","tensor([[0.4815, 0.0547, 0.1988],\n","        [0.1654, 0.6765, 0.6826],\n","        [0.5449, 0.8414, 0.8411]])\n","\n","Node 13 weights:\n","tensor([[0.9110, 0.8568, 0.6788],\n","        [0.6251, 0.7666, 0.1794],\n","        [0.6630, 0.6731, 0.9904]])\n","\n","Node 14 weights:\n","tensor([[0.4972, 0.5126, 0.4597],\n","        [0.2311, 0.3956, 0.9537],\n","        [0.9619, 0.9888, 0.4429]])\n","\n","Node 15 weights:\n","tensor([[0.4344, 0.1088, 0.0322],\n","        [0.7942, 0.3081, 0.5249],\n","        [0.0798, 0.3896, 0.9127]])\n","\n","Node 16 weights:\n","tensor([[0.7834, 0.5501, 0.2082],\n","        [0.7988, 0.5508, 0.0664],\n","        [0.3573, 0.8126, 0.2013]])\n","\n","Node 17 weights:\n","tensor([[0.6691, 0.9482, 0.4753],\n","        [0.6641, 0.2659, 0.4691],\n","        [0.7769, 0.3310, 0.6694]])\n","\n","Node 18 weights:\n","tensor([[0.8609, 0.5092, 0.7656],\n","        [0.6925, 0.9469, 0.1624],\n","        [0.7845, 0.5834, 0.5506]])\n","\n","Node 19 weights:\n","tensor([[0.3857, 0.6373, 0.9013],\n","        [0.5783, 0.9114, 0.8210],\n","        [0.4188, 0.9785, 0.5522]])\n","\n","Node 20 weights:\n","tensor([[0.5006, 0.4124, 0.0175],\n","        [0.5395, 0.0048, 0.0981],\n","        [0.5122, 0.3886, 0.4356]])\n","\n","Node 21 weights:\n","tensor([[0.5108, 0.8193, 0.5856],\n","        [0.2755, 0.4053, 0.7361],\n","        [0.7174, 0.9909, 0.2080]])\n","\n","Node 22 weights:\n","tensor([[0.6835, 0.1439, 0.5990],\n","        [0.0019, 0.7498, 0.8537],\n","        [0.3368, 0.1376, 0.0194]])\n","\n","Node 23 weights:\n","tensor([[0.0138, 0.1728, 0.8666],\n","        [0.7824, 0.1547, 0.3042],\n","        [0.5762, 0.6110, 0.5289]])\n","\n","Node 24 weights:\n","tensor([[0.2857, 0.6807, 0.8455],\n","        [0.4948, 0.9762, 0.3271],\n","        [0.0572, 0.5919, 0.6286]])\n","\n","Node 25 weights:\n","tensor([[0.9910, 0.5139, 0.7364],\n","        [0.4925, 0.6090, 0.2788],\n","        [0.5299, 0.1029, 0.9675]])\n","\n","Node 26 weights:\n","tensor([[0.0429, 0.4923, 0.3575],\n","        [0.0647, 0.3928, 0.4696],\n","        [0.5020, 0.3058, 0.1813]])\n","\n","Node 27 weights:\n","tensor([[0.2694, 0.9379, 0.0159],\n","        [0.2317, 0.3635, 0.0181],\n","        [0.4145, 0.8798, 0.6607]])\n","\n","Node 28 weights:\n","tensor([[0.9875, 0.5984, 0.9551],\n","        [0.5967, 0.9232, 0.6010],\n","        [0.7869, 0.8816, 0.6102]])\n","\n","Node 29 weights:\n","tensor([[0.4159, 0.1797, 0.4680],\n","        [0.4895, 0.3763, 0.2429],\n","        [0.2041, 0.0552, 0.3039]])\n","\n","Node 30 weights:\n","tensor([[0.8690, 0.5320, 0.7830],\n","        [0.8601, 0.7618, 0.9626],\n","        [0.0419, 0.6994, 0.6735]])\n","\n","Node 31 weights:\n","tensor([[0.2555, 0.9006, 0.6943],\n","        [0.3074, 0.7053, 0.1038],\n","        [0.1820, 0.3581, 0.3384]])\n","\n","Node 32 weights:\n","tensor([[0.3454, 0.7635, 0.7919],\n","        [0.4195, 0.8787, 0.2864],\n","        [0.4393, 0.4811, 0.7904]])\n","\n","Node 33 weights:\n","tensor([[0.2286, 0.9948, 0.3336],\n","        [0.6117, 0.5450, 0.9534],\n","        [0.9995, 0.4096, 0.9932]])\n","\n","Node 34 weights:\n","tensor([[0.5767, 0.4670, 0.7460],\n","        [0.4960, 0.4360, 0.6251],\n","        [0.4300, 0.5304, 0.2889]])\n","\n","Node 35 weights:\n","tensor([[0.1913, 0.5822, 0.4829],\n","        [0.2630, 0.2267, 0.4207],\n","        [0.1199, 0.2158, 0.4437]])\n","\n","Node 36 weights:\n","tensor([[0.6468, 0.8813, 0.3974],\n","        [0.3472, 0.2779, 0.7756],\n","        [0.2413, 0.3580, 0.7874]])\n","\n","Node 37 weights:\n","tensor([[0.5185, 0.2409, 0.9588],\n","        [0.1571, 0.1511, 0.7024],\n","        [0.1967, 0.5154, 0.7922]])\n","\n","Node 38 weights:\n","tensor([[0.0872, 0.4906, 0.3017],\n","        [0.7497, 0.7469, 0.3349],\n","        [0.1881, 0.8131, 0.4560]])\n","\n","Node 39 weights:\n","tensor([[0.4192, 0.6012, 0.4370],\n","        [0.3635, 0.7672, 0.1486],\n","        [0.0574, 0.0510, 0.0291]])\n","\n","Node 40 weights:\n","tensor([[0.6482, 0.0556, 0.3855],\n","        [0.6986, 0.0031, 0.4732],\n","        [0.0508, 0.5768, 0.8011]])\n","\n","Node 41 weights:\n","tensor([[0.8312, 0.0617, 0.8714],\n","        [0.0888, 0.1232, 0.9610],\n","        [0.9882, 0.9907, 0.6726]])\n","\n","Node 42 weights:\n","tensor([[0.5294, 0.1214, 0.1481],\n","        [0.7772, 0.6018, 0.5007],\n","        [0.8767, 0.9186, 0.4128]])\n","\n","Node 43 weights:\n","tensor([[0.8477, 0.6863, 0.2347],\n","        [0.5475, 0.3293, 0.3706],\n","        [0.4683, 0.4370, 0.4815]])\n","\n","Node 44 weights:\n","tensor([[0.2178, 0.3493, 0.5230],\n","        [0.3286, 0.7904, 0.3406],\n","        [0.3868, 0.6088, 0.6191]])\n","\n","Node 45 weights:\n","tensor([[0.1391, 0.9366, 0.8237],\n","        [0.0514, 0.4712, 0.8200],\n","        [0.3469, 0.4457, 0.4910]])\n","\n","Node 46 weights:\n","tensor([[0.5071, 0.4234, 0.8065],\n","        [0.2673, 0.6734, 0.9252],\n","        [0.1911, 0.2360, 0.6755]])\n","\n","Node 47 weights:\n","tensor([[0.3147, 0.5788, 0.4686],\n","        [0.0434, 0.5058, 0.0709],\n","        [0.4831, 0.8542, 0.7273]])\n","\n","Node 48 weights:\n","tensor([[0.4395, 0.0213, 0.4245],\n","        [0.5173, 0.8907, 0.7987],\n","        [0.6709, 0.3025, 0.1702]])\n","\n","Node 49 weights:\n","tensor([[0.4798, 0.0273, 0.4878],\n","        [0.5159, 0.9204, 0.1312],\n","        [0.2586, 0.0488, 0.6082]])\n","\n","Node 50 weights:\n","tensor([[0.3097, 0.9033, 0.2568],\n","        [0.6154, 0.8733, 0.3131],\n","        [0.3707, 0.3017, 0.8026]])\n","\n","Node 51 weights:\n","tensor([[0.2661, 0.3255, 0.9343],\n","        [0.4451, 0.5428, 0.6223],\n","        [0.8528, 0.7772, 0.9461]])\n","\n","Node 52 weights:\n","tensor([[0.6804, 0.2867, 0.0515],\n","        [0.4795, 0.2935, 0.0403],\n","        [0.0899, 0.4115, 0.2727]])\n","\n","Node 53 weights:\n","tensor([[0.4574, 0.9219, 0.8381],\n","        [0.2194, 0.4821, 0.0953],\n","        [0.6978, 0.3924, 0.8486]])\n","\n","Node 54 weights:\n","tensor([[0.1928, 0.3052, 0.4160],\n","        [0.8028, 0.4557, 0.7417],\n","        [0.7052, 0.7270, 0.3047]])\n","\n","Node 55 weights:\n","tensor([[0.8216, 0.1379, 0.0427],\n","        [0.5330, 0.9328, 0.9346],\n","        [0.2988, 0.4036, 0.5613]])\n","\n","Node 56 weights:\n","tensor([[0.3499, 0.6365, 0.6721],\n","        [0.3744, 0.3913, 0.0729],\n","        [0.8780, 0.3606, 0.2772]])\n","\n","Node 57 weights:\n","tensor([[0.5575, 0.6028, 0.8945],\n","        [0.5841, 0.7469, 0.1126],\n","        [0.4081, 0.8279, 0.9203]])\n","\n","Node 58 weights:\n","tensor([[0.1798, 0.7917, 0.9725],\n","        [0.5651, 0.3072, 0.7389],\n","        [0.4405, 0.3301, 0.0997]])\n","\n","Node 59 weights:\n","tensor([[0.1318, 0.4317, 0.0246],\n","        [0.4189, 0.0641, 0.6205],\n","        [0.2776, 0.9271, 0.3472]])\n","\n","Node 60 weights:\n","tensor([[0.4162, 0.2515, 0.0740],\n","        [0.8873, 0.5943, 0.7182],\n","        [0.1320, 0.2129, 0.8972]])\n","\n","Node 61 weights:\n","tensor([[0.1494, 0.3175, 0.9613],\n","        [0.9548, 0.3035, 0.4355],\n","        [0.6808, 0.9761, 0.8723]])\n","\n","Node 62 weights:\n","tensor([[0.4138, 0.5433, 0.9351],\n","        [0.0828, 0.0448, 0.1275],\n","        [0.9875, 0.9708, 0.4523]])\n","\n","Node 63 weights:\n","tensor([[0.8709, 0.5915, 0.8707],\n","        [0.0980, 0.4569, 0.7616],\n","        [0.1849, 0.6108, 0.0866]])\n","\n","Node 64 weights:\n","tensor([[0.9690, 0.5322, 0.1400],\n","        [0.6374, 0.3311, 0.6383],\n","        [0.7104, 0.6297, 0.4066]])\n","\n","Node 65 weights:\n","tensor([[0.7387, 0.8682, 0.3262],\n","        [0.1229, 0.5958, 0.1476],\n","        [0.2730, 0.6480, 0.3972]])\n","\n","Node 66 weights:\n","tensor([[0.9121, 0.7512, 0.8382],\n","        [0.6231, 0.9330, 0.8231],\n","        [0.0227, 0.1105, 0.9369]])\n","\n","Node 67 weights:\n","tensor([[0.4923, 0.1739, 0.1161],\n","        [0.9108, 0.7771, 0.9366],\n","        [0.5437, 0.6900, 0.2990]])\n","\n","Node 68 weights:\n","tensor([[4.2120e-01, 9.2011e-01, 9.3658e-01],\n","        [4.3942e-01, 4.9598e-01, 2.0413e-01],\n","        [6.3467e-04, 1.6883e-01, 6.7216e-01]])\n","\n","Node 69 weights:\n","tensor([[0.5008, 0.9118, 0.3063],\n","        [0.6425, 0.9981, 0.4585],\n","        [0.2424, 0.1808, 0.0975]])\n","\n","Node 70 weights:\n","tensor([[0.1991, 0.7634, 0.4348],\n","        [0.2320, 0.7563, 0.9896],\n","        [0.6907, 0.2291, 0.3109]])\n","\n","Node 71 weights:\n","tensor([[0.4608, 0.0069, 0.3944],\n","        [0.4978, 0.3713, 0.3059],\n","        [0.7276, 0.7322, 0.6598]])\n","\n","Node 72 weights:\n","tensor([[0.1187, 0.1950, 0.0704],\n","        [0.5267, 0.4040, 0.6845],\n","        [0.9095, 0.6364, 0.1087]])\n","\n","Node 73 weights:\n","tensor([[0.4226, 0.7881, 0.6405],\n","        [0.0836, 0.9112, 0.9162],\n","        [0.3883, 0.9248, 0.1254]])\n","\n","Node 74 weights:\n","tensor([[0.4590, 0.8317, 0.8201],\n","        [0.2030, 0.3308, 0.0058],\n","        [0.6463, 0.1990, 0.7878]])\n","\n","Node 75 weights:\n","tensor([[0.6620, 0.4756, 0.1386],\n","        [0.7948, 0.3486, 0.7926],\n","        [0.9343, 0.8730, 0.7118]])\n","\n","Node 76 weights:\n","tensor([[0.6822, 0.7442, 0.5035],\n","        [0.2646, 0.0342, 0.8299],\n","        [0.0463, 0.4599, 0.4527]])\n","\n","Node 77 weights:\n","tensor([[0.2383, 0.6593, 0.2023],\n","        [0.6336, 0.8125, 0.7899],\n","        [0.5027, 0.6660, 0.0218]])\n","\n","Node 78 weights:\n","tensor([[0.8060, 0.0261, 0.0491],\n","        [0.6485, 0.0795, 0.7304],\n","        [0.3331, 0.5988, 0.1490]])\n","\n","Node 79 weights:\n","tensor([[0.3773, 0.8177, 0.1768],\n","        [0.2114, 0.8539, 0.5739],\n","        [0.3401, 0.6216, 0.0309]])\n","\n","Node 80 weights:\n","tensor([[0.4861, 0.3901, 0.7925],\n","        [0.9731, 0.8919, 0.0670],\n","        [0.0854, 0.6021, 0.6408]])\n","\n","Node 81 weights:\n","tensor([[0.3998, 0.7201, 0.4368],\n","        [0.5935, 0.2616, 0.1477],\n","        [0.9140, 0.4648, 0.8130]])\n","\n","Node 82 weights:\n","tensor([[0.5337, 0.5008, 0.4992],\n","        [0.7452, 0.0138, 0.2897],\n","        [0.7094, 0.8729, 0.0015]])\n","\n","Node 83 weights:\n","tensor([[0.9914, 0.2666, 0.2707],\n","        [0.7534, 0.2709, 0.3946],\n","        [0.3593, 0.9876, 0.4124]])\n","\n","Node 84 weights:\n","tensor([[0.2565, 0.8365, 0.9694],\n","        [0.4364, 0.6742, 0.1581],\n","        [0.2266, 0.5955, 0.1240]])\n","\n","Node 85 weights:\n","tensor([[0.6247, 0.4255, 0.2090],\n","        [0.6450, 0.3045, 0.1423],\n","        [0.5445, 0.3661, 0.1727]])\n","\n","Node 86 weights:\n","tensor([[0.0616, 0.5234, 0.0420],\n","        [0.2490, 0.5333, 0.8751],\n","        [0.7304, 0.1531, 0.3204]])\n","\n","Node 87 weights:\n","tensor([[0.9404, 0.4987, 0.4610],\n","        [0.1361, 0.2650, 0.5578],\n","        [0.7960, 0.7015, 0.6859]])\n","\n","Node 88 weights:\n","tensor([[0.1080, 0.0587, 0.2576],\n","        [0.0761, 0.7770, 0.2663],\n","        [0.2815, 0.1655, 0.5871]])\n","\n","Node 89 weights:\n","tensor([[0.7453, 0.3981, 0.3637],\n","        [0.6232, 0.7254, 0.7836],\n","        [0.2849, 0.6831, 0.2902]])\n","\n","Node 90 weights:\n","tensor([[0.3572, 0.2544, 0.4968],\n","        [0.0411, 0.2443, 0.3616],\n","        [0.6928, 0.4076, 0.2068]])\n","\n","Node 91 weights:\n","tensor([[0.2179, 0.6130, 0.9474],\n","        [0.0291, 0.1932, 0.6005],\n","        [0.3508, 0.5311, 0.0243]])\n","\n","Node 92 weights:\n","tensor([[0.8581, 0.2963, 0.0881],\n","        [0.9282, 0.9626, 0.1959],\n","        [0.1981, 0.1758, 0.2902]])\n","\n","Node 93 weights:\n","tensor([[0.8350, 0.6025, 0.7472],\n","        [0.0253, 0.1026, 0.2364],\n","        [0.3578, 0.0379, 0.3052]])\n","\n","Node 94 weights:\n","tensor([[0.6194, 0.6504, 0.5460],\n","        [0.1742, 0.9339, 0.8439],\n","        [0.1325, 0.3885, 0.2558]])\n","\n","Node 95 weights:\n","tensor([[0.0523, 0.5455, 0.9226],\n","        [0.4977, 0.0278, 0.5317],\n","        [0.3106, 0.3442, 0.7247]])\n","\n","Node 96 weights:\n","tensor([[0.9264, 0.8483, 0.6053],\n","        [0.4256, 0.4058, 0.7334],\n","        [0.9028, 0.5052, 0.2365]])\n","\n","Node 97 weights:\n","tensor([[0.6098, 0.2565, 0.1258],\n","        [0.0936, 0.5602, 0.9301],\n","        [0.6093, 0.5593, 0.2508]])\n","\n","Node 98 weights:\n","tensor([[0.5345, 0.9511, 0.4091],\n","        [0.0799, 0.8779, 0.3796],\n","        [0.0987, 0.8523, 0.1263]])\n","\n","Node 99 weights:\n","tensor([[0.0482, 0.9261, 0.5469],\n","        [0.0199, 0.6951, 0.7136],\n","        [0.2123, 0.4716, 0.4409]])\n","\n","Node 100 weights:\n","tensor([[0.8777, 0.6350, 0.4309],\n","        [0.2400, 0.8449, 0.1635],\n","        [0.6641, 0.3151, 0.7998]])\n","\n","Global Matrix (Gi):\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Received Global Matrix at Nodes:\n","Node 1 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 2 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 3 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 4 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 5 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 6 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 7 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 8 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 9 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 10 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 11 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 12 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 13 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 14 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 15 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 16 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 17 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 18 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 19 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 20 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 21 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 22 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 23 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 24 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 25 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 26 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 27 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 28 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 29 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 30 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 31 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 32 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 33 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 34 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 35 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 36 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 37 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 38 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 39 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 40 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 41 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 42 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 43 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 44 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 45 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 46 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 47 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 48 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 49 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 50 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 51 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 52 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 53 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 54 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 55 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 56 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 57 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 58 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 59 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 60 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 61 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 62 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 63 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 64 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 65 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 66 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 67 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 68 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 69 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 70 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 71 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 72 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 73 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 74 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 75 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 76 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 77 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 78 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 79 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 80 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 81 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 82 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 83 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 84 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 85 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 86 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 87 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 88 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 89 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 90 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 91 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 92 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 93 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 94 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 95 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 96 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 97 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 98 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 99 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n","Node 100 received Gi:\n","tensor([[0.4795, 0.5173, 0.4812],\n","        [0.4627, 0.5246, 0.5036],\n","        [0.4486, 0.5343, 0.4903]])\n","\n"]}],"source":["import torch\n","import random\n","\n","# Number of nodes\n","N = 100  # Adjust for your simulation\n","matrix_size = (3, 3)  # Example matrix size\n","\n","# Generate random weight matrices for each node\n","node_weights = [torch.rand(matrix_size) for _ in range(N)]\n","\n","# Simulated encryption and decryption functions (mock)\n","def encrypt(matrix):\n","    return matrix + 0.01  # Mock encryption (add noise)\n","\n","def decrypt(matrix):\n","    return matrix - 0.01  # Mock decryption (remove noise)\n","\n","# Step 1: Nodes send weights to the global model\n","encrypted_weights = [encrypt(weight) for weight in node_weights]\n","\n","# Step 2: Global model computes the average matrix\n","decrypted_weights = [decrypt(weight) for weight in encrypted_weights]\n","global_matrix = sum(decrypted_weights) / N\n","\n","# Step 3: Global model sends the average matrix back to the nodes\n","encrypted_global_matrix = encrypt(global_matrix)\n","received_matrices = [decrypt(encrypted_global_matrix) for _ in range(N)]\n","\n","# Output results\n","print(\"Original Node Weights:\")\n","for i, weight in enumerate(node_weights, 1):\n","    print(f\"Node {i} weights:\\n{weight}\\n\")\n","\n","print(f\"Global Matrix (Gi):\\n{global_matrix}\\n\")\n","\n","print(\"Received Global Matrix at Nodes:\")\n","for i, matrix in enumerate(received_matrices, 1):\n","    print(f\"Node {i} received Gi:\\n{matrix}\\n\")\n"]},{"cell_type":"markdown","source":["Iterative Process Outline\n","Feed-Forward Training Loop:\n","\n","Simulate training by modifying weights (Wi) at each node using a basic operation, e.g., adding a constant or gradient.\n","Iteration of Communication:\n","\n","Simulate multiple rounds of weight sharing and averaging.\n","Enhanced Logging:\n","\n","Track and log weight updates for each iteration.\n","Optional Visualization:\n","\n","Visualize the convergence of weights across nodes using plots."],"metadata":{"id":"wUvL7TewkStv"}},{"cell_type":"code","source":["import torch\n","import random\n","\n","# Number of nodes and iterations\n","N = 100  # Number of nodes\n","matrix_size = (3, 3)  # Size of the weight matrices\n","iterations = 3  # Number of iterations for communication and update\n","\n","# Generate random initial weight matrices for each node\n","node_weights = [torch.rand(matrix_size) for _ in range(N)]\n","\n","# Simulated encryption and decryption functions (mock)\n","def encrypt(matrix):\n","    return matrix + 0.01  # Mock encryption (add noise)\n","\n","def decrypt(matrix):\n","    return matrix - 0.01  # Mock decryption (remove noise)\n","\n","# Function to simulate a training step\n","def update_weights(matrix, step=0.1):\n","    return matrix + step * torch.rand(matrix_size)  # Example of weight update\n","\n","# Iterative process\n","for iteration in range(1, iterations + 1):\n","    print(f\"--- Iteration {iteration} ---\")\n","\n","    # Step 1: Nodes send weights to the global model\n","    encrypted_weights = [encrypt(weight) for weight in node_weights]\n","\n","    # Step 2: Global model computes the average matrix\n","    decrypted_weights = [decrypt(weight) for weight in encrypted_weights]\n","    global_matrix = sum(decrypted_weights) / N\n","\n","    # Log the global matrix\n","    print(f\"Global Matrix (Gi) after averaging:\\n{global_matrix}\\n\")\n","\n","    # Step 3: Global model sends the average matrix back to the nodes\n","    encrypted_global_matrix = encrypt(global_matrix)\n","    received_matrices = [decrypt(encrypted_global_matrix) for _ in range(N)]\n","\n","    # Step 4: Nodes update their weights using the received global matrix\n","    node_weights = [update_weights(matrix) for matrix in received_matrices]\n","\n","    # Log updated weights for each node\n","    for i, weight in enumerate(node_weights, 1):\n","        print(f\"Node {i} updated weights:\\n{weight}\\n\")\n","\n","# Final output\n","print(\"--- Final Node Weights After All Iterations ---\")\n","for i, weight in enumerate(node_weights, 1):\n","    print(f\"Node {i} final weights:\\n{weight}\\n\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aW_TpyI0kGDM","executionInfo":{"status":"ok","timestamp":1732035337826,"user_tz":-120,"elapsed":610,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"9679f3cd-3deb-4d2b-dfa6-ece6ad69b466"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["--- Iteration 1 ---\n","Global Matrix (Gi) after averaging:\n","tensor([[0.5395, 0.5052, 0.4996],\n","        [0.4228, 0.5146, 0.4655],\n","        [0.4872, 0.4888, 0.4994]])\n","\n","Node 1 updated weights:\n","tensor([[0.5853, 0.5551, 0.4997],\n","        [0.5014, 0.5316, 0.5217],\n","        [0.5287, 0.5836, 0.5722]])\n","\n","Node 2 updated weights:\n","tensor([[0.5428, 0.5994, 0.5827],\n","        [0.4628, 0.5507, 0.4853],\n","        [0.5013, 0.5064, 0.5634]])\n","\n","Node 3 updated weights:\n","tensor([[0.5542, 0.5057, 0.5325],\n","        [0.4417, 0.5457, 0.5433],\n","        [0.5389, 0.5610, 0.5439]])\n","\n","Node 4 updated weights:\n","tensor([[0.5783, 0.5191, 0.5165],\n","        [0.4843, 0.6091, 0.4705],\n","        [0.5171, 0.5442, 0.5517]])\n","\n","Node 5 updated weights:\n","tensor([[0.6317, 0.5240, 0.5060],\n","        [0.4923, 0.5689, 0.5332],\n","        [0.5210, 0.5156, 0.5382]])\n","\n","Node 6 updated weights:\n","tensor([[0.6299, 0.5678, 0.5894],\n","        [0.5097, 0.5646, 0.5019],\n","        [0.5818, 0.5864, 0.5989]])\n","\n","Node 7 updated weights:\n","tensor([[0.5954, 0.5687, 0.5130],\n","        [0.5054, 0.5626, 0.4896],\n","        [0.5738, 0.5034, 0.5904]])\n","\n","Node 8 updated weights:\n","tensor([[0.5878, 0.5468, 0.5679],\n","        [0.4525, 0.5514, 0.5273],\n","        [0.5136, 0.4906, 0.5937]])\n","\n","Node 9 updated weights:\n","tensor([[0.6086, 0.5117, 0.5282],\n","        [0.4900, 0.5486, 0.4966],\n","        [0.5796, 0.5856, 0.5202]])\n","\n","Node 10 updated weights:\n","tensor([[0.5420, 0.5392, 0.5650],\n","        [0.4616, 0.5867, 0.4726],\n","        [0.5457, 0.5451, 0.5627]])\n","\n","Node 11 updated weights:\n","tensor([[0.5566, 0.5595, 0.5967],\n","        [0.4563, 0.6023, 0.5102],\n","        [0.5466, 0.5107, 0.5118]])\n","\n","Node 12 updated weights:\n","tensor([[0.5410, 0.5267, 0.5820],\n","        [0.5110, 0.5928, 0.5229],\n","        [0.4980, 0.5254, 0.5786]])\n","\n","Node 13 updated weights:\n","tensor([[0.5818, 0.5618, 0.5707],\n","        [0.4368, 0.5654, 0.5411],\n","        [0.5755, 0.5011, 0.5272]])\n","\n","Node 14 updated weights:\n","tensor([[0.5602, 0.5360, 0.5066],\n","        [0.4369, 0.5287, 0.4903],\n","        [0.5682, 0.5606, 0.5614]])\n","\n","Node 15 updated weights:\n","tensor([[0.5992, 0.5702, 0.5448],\n","        [0.5222, 0.5629, 0.5231],\n","        [0.5318, 0.5077, 0.5337]])\n","\n","Node 16 updated weights:\n","tensor([[0.5760, 0.5681, 0.5902],\n","        [0.4533, 0.5356, 0.4682],\n","        [0.5615, 0.5370, 0.5200]])\n","\n","Node 17 updated weights:\n","tensor([[0.5478, 0.5890, 0.5101],\n","        [0.5104, 0.5851, 0.4782],\n","        [0.5101, 0.5157, 0.5849]])\n","\n","Node 18 updated weights:\n","tensor([[0.6107, 0.5493, 0.5899],\n","        [0.4583, 0.5480, 0.4719],\n","        [0.5658, 0.5834, 0.5575]])\n","\n","Node 19 updated weights:\n","tensor([[0.5419, 0.5613, 0.5065],\n","        [0.4981, 0.5593, 0.5387],\n","        [0.4928, 0.5866, 0.5399]])\n","\n","Node 20 updated weights:\n","tensor([[0.5570, 0.5396, 0.5907],\n","        [0.4837, 0.5598, 0.5056],\n","        [0.4966, 0.5577, 0.5096]])\n","\n","Node 21 updated weights:\n","tensor([[0.5506, 0.5745, 0.5802],\n","        [0.5180, 0.5208, 0.5632],\n","        [0.5258, 0.5008, 0.5042]])\n","\n","Node 22 updated weights:\n","tensor([[0.5921, 0.5154, 0.5958],\n","        [0.5066, 0.5689, 0.4738],\n","        [0.5263, 0.4950, 0.5769]])\n","\n","Node 23 updated weights:\n","tensor([[0.6369, 0.5884, 0.5489],\n","        [0.4970, 0.6088, 0.5402],\n","        [0.5264, 0.5107, 0.5610]])\n","\n","Node 24 updated weights:\n","tensor([[0.5603, 0.5493, 0.5681],\n","        [0.4784, 0.5971, 0.5377],\n","        [0.5853, 0.5517, 0.5649]])\n","\n","Node 25 updated weights:\n","tensor([[0.5616, 0.5777, 0.5437],\n","        [0.4831, 0.5940, 0.5522],\n","        [0.5382, 0.5504, 0.5053]])\n","\n","Node 26 updated weights:\n","tensor([[0.6118, 0.5908, 0.5037],\n","        [0.4257, 0.6002, 0.5505],\n","        [0.5315, 0.4898, 0.5103]])\n","\n","Node 27 updated weights:\n","tensor([[0.5458, 0.5354, 0.5463],\n","        [0.4532, 0.5685, 0.5089],\n","        [0.5203, 0.5530, 0.5826]])\n","\n","Node 28 updated weights:\n","tensor([[0.5886, 0.5249, 0.5437],\n","        [0.4413, 0.5503, 0.4686],\n","        [0.5069, 0.5024, 0.5340]])\n","\n","Node 29 updated weights:\n","tensor([[0.5589, 0.5855, 0.5001],\n","        [0.4298, 0.6081, 0.4778],\n","        [0.5119, 0.5518, 0.5047]])\n","\n","Node 30 updated weights:\n","tensor([[0.6275, 0.6019, 0.5117],\n","        [0.4677, 0.6066, 0.5170],\n","        [0.5454, 0.5100, 0.5108]])\n","\n","Node 31 updated weights:\n","tensor([[0.6105, 0.5183, 0.5101],\n","        [0.4778, 0.5707, 0.5350],\n","        [0.5199, 0.4905, 0.5481]])\n","\n","Node 32 updated weights:\n","tensor([[0.5446, 0.5291, 0.5744],\n","        [0.4991, 0.5257, 0.5633],\n","        [0.4922, 0.5412, 0.5534]])\n","\n","Node 33 updated weights:\n","tensor([[0.6276, 0.5509, 0.5946],\n","        [0.4803, 0.5869, 0.4685],\n","        [0.5806, 0.5121, 0.5715]])\n","\n","Node 34 updated weights:\n","tensor([[0.5460, 0.5510, 0.5214],\n","        [0.4265, 0.5402, 0.5379],\n","        [0.5842, 0.4925, 0.5791]])\n","\n","Node 35 updated weights:\n","tensor([[0.5980, 0.5860, 0.5799],\n","        [0.5081, 0.6063, 0.5385],\n","        [0.5105, 0.5615, 0.5364]])\n","\n","Node 36 updated weights:\n","tensor([[0.5416, 0.5767, 0.5219],\n","        [0.5180, 0.5173, 0.5023],\n","        [0.5251, 0.5434, 0.5252]])\n","\n","Node 37 updated weights:\n","tensor([[0.5833, 0.5178, 0.5131],\n","        [0.4246, 0.5995, 0.5341],\n","        [0.5247, 0.5236, 0.5616]])\n","\n","Node 38 updated weights:\n","tensor([[0.6091, 0.5075, 0.5395],\n","        [0.5182, 0.5786, 0.5406],\n","        [0.5462, 0.5732, 0.5448]])\n","\n","Node 39 updated weights:\n","tensor([[0.5787, 0.6017, 0.5268],\n","        [0.4417, 0.5819, 0.5138],\n","        [0.5070, 0.5693, 0.5777]])\n","\n","Node 40 updated weights:\n","tensor([[0.5779, 0.5914, 0.5956],\n","        [0.4799, 0.5385, 0.4747],\n","        [0.5441, 0.5315, 0.5121]])\n","\n","Node 41 updated weights:\n","tensor([[0.6314, 0.5944, 0.5450],\n","        [0.4694, 0.5542, 0.5306],\n","        [0.5768, 0.5517, 0.5278]])\n","\n","Node 42 updated weights:\n","tensor([[0.6151, 0.5903, 0.5760],\n","        [0.4958, 0.5694, 0.4926],\n","        [0.5484, 0.5491, 0.5537]])\n","\n","Node 43 updated weights:\n","tensor([[0.5434, 0.5249, 0.5449],\n","        [0.5180, 0.6051, 0.4727],\n","        [0.5401, 0.5084, 0.5794]])\n","\n","Node 44 updated weights:\n","tensor([[0.5801, 0.5536, 0.5538],\n","        [0.5062, 0.5743, 0.5394],\n","        [0.5061, 0.5705, 0.5607]])\n","\n","Node 45 updated weights:\n","tensor([[0.6176, 0.5535, 0.5391],\n","        [0.4272, 0.5825, 0.4769],\n","        [0.4995, 0.4949, 0.5889]])\n","\n","Node 46 updated weights:\n","tensor([[0.5457, 0.5184, 0.5451],\n","        [0.4820, 0.5670, 0.5442],\n","        [0.5046, 0.5735, 0.5184]])\n","\n","Node 47 updated weights:\n","tensor([[0.5997, 0.5203, 0.5651],\n","        [0.5058, 0.5868, 0.5102],\n","        [0.5161, 0.5336, 0.5000]])\n","\n","Node 48 updated weights:\n","tensor([[0.5966, 0.5487, 0.5591],\n","        [0.5105, 0.5383, 0.5298],\n","        [0.5830, 0.5498, 0.5573]])\n","\n","Node 49 updated weights:\n","tensor([[0.5449, 0.5824, 0.5235],\n","        [0.4491, 0.5282, 0.4655],\n","        [0.5017, 0.5171, 0.5822]])\n","\n","Node 50 updated weights:\n","tensor([[0.6347, 0.5776, 0.5515],\n","        [0.5165, 0.6069, 0.5069],\n","        [0.5035, 0.5841, 0.5162]])\n","\n","Node 51 updated weights:\n","tensor([[0.5421, 0.5157, 0.5675],\n","        [0.5132, 0.5670, 0.5506],\n","        [0.5777, 0.5756, 0.5553]])\n","\n","Node 52 updated weights:\n","tensor([[0.6216, 0.5072, 0.5558],\n","        [0.4917, 0.5428, 0.5544],\n","        [0.5666, 0.5721, 0.5190]])\n","\n","Node 53 updated weights:\n","tensor([[0.6135, 0.5136, 0.5783],\n","        [0.4856, 0.6115, 0.4786],\n","        [0.5793, 0.5815, 0.5479]])\n","\n","Node 54 updated weights:\n","tensor([[0.5592, 0.5601, 0.5652],\n","        [0.4903, 0.5837, 0.4831],\n","        [0.5488, 0.5172, 0.5416]])\n","\n","Node 55 updated weights:\n","tensor([[0.5435, 0.5738, 0.5371],\n","        [0.5113, 0.5576, 0.4678],\n","        [0.5082, 0.5810, 0.5687]])\n","\n","Node 56 updated weights:\n","tensor([[0.5494, 0.5711, 0.5908],\n","        [0.5163, 0.5245, 0.4713],\n","        [0.4966, 0.5693, 0.5327]])\n","\n","Node 57 updated weights:\n","tensor([[0.6228, 0.5583, 0.5098],\n","        [0.4360, 0.5683, 0.4931],\n","        [0.5070, 0.4892, 0.5314]])\n","\n","Node 58 updated weights:\n","tensor([[0.5519, 0.5345, 0.5934],\n","        [0.4947, 0.5475, 0.4707],\n","        [0.5341, 0.4891, 0.5579]])\n","\n","Node 59 updated weights:\n","tensor([[0.5878, 0.5816, 0.5577],\n","        [0.4425, 0.6053, 0.4666],\n","        [0.5729, 0.5625, 0.5921]])\n","\n","Node 60 updated weights:\n","tensor([[0.6045, 0.5248, 0.5513],\n","        [0.4411, 0.6072, 0.4882],\n","        [0.5444, 0.5092, 0.5269]])\n","\n","Node 61 updated weights:\n","tensor([[0.5847, 0.5973, 0.5893],\n","        [0.5017, 0.5396, 0.4797],\n","        [0.5651, 0.5456, 0.5014]])\n","\n","Node 62 updated weights:\n","tensor([[0.5576, 0.5576, 0.5964],\n","        [0.4254, 0.5331, 0.5209],\n","        [0.4925, 0.5347, 0.5500]])\n","\n","Node 63 updated weights:\n","tensor([[0.5728, 0.5882, 0.5698],\n","        [0.4932, 0.5834, 0.5289],\n","        [0.5245, 0.5191, 0.5603]])\n","\n","Node 64 updated weights:\n","tensor([[0.5902, 0.5418, 0.5096],\n","        [0.5146, 0.5723, 0.5634],\n","        [0.5512, 0.5162, 0.5363]])\n","\n","Node 65 updated weights:\n","tensor([[0.5581, 0.5852, 0.5960],\n","        [0.4994, 0.5926, 0.5584],\n","        [0.5834, 0.5623, 0.5159]])\n","\n","Node 66 updated weights:\n","tensor([[0.5759, 0.5962, 0.5456],\n","        [0.4797, 0.5806, 0.5380],\n","        [0.5224, 0.4972, 0.5383]])\n","\n","Node 67 updated weights:\n","tensor([[0.5567, 0.5468, 0.5416],\n","        [0.4581, 0.5720, 0.4831],\n","        [0.5749, 0.5273, 0.5135]])\n","\n","Node 68 updated weights:\n","tensor([[0.5952, 0.6023, 0.5487],\n","        [0.4614, 0.5302, 0.5437],\n","        [0.4974, 0.4957, 0.5553]])\n","\n","Node 69 updated weights:\n","tensor([[0.6389, 0.5765, 0.5877],\n","        [0.4397, 0.5678, 0.4749],\n","        [0.4986, 0.5816, 0.5483]])\n","\n","Node 70 updated weights:\n","tensor([[0.6027, 0.5459, 0.5099],\n","        [0.4972, 0.5732, 0.5550],\n","        [0.5586, 0.4995, 0.5972]])\n","\n","Node 71 updated weights:\n","tensor([[0.6133, 0.5817, 0.5665],\n","        [0.4389, 0.5516, 0.4946],\n","        [0.5053, 0.5165, 0.5687]])\n","\n","Node 72 updated weights:\n","tensor([[0.6333, 0.5486, 0.5823],\n","        [0.4408, 0.5649, 0.5333],\n","        [0.4906, 0.5264, 0.5640]])\n","\n","Node 73 updated weights:\n","tensor([[0.6058, 0.5458, 0.5979],\n","        [0.4852, 0.5620, 0.5443],\n","        [0.5594, 0.5716, 0.5038]])\n","\n","Node 74 updated weights:\n","tensor([[0.6192, 0.5132, 0.5697],\n","        [0.4846, 0.5283, 0.5431],\n","        [0.5375, 0.5359, 0.5277]])\n","\n","Node 75 updated weights:\n","tensor([[0.6133, 0.5523, 0.5541],\n","        [0.5170, 0.5898, 0.5344],\n","        [0.5128, 0.4942, 0.5878]])\n","\n","Node 76 updated weights:\n","tensor([[0.6353, 0.5980, 0.5263],\n","        [0.4722, 0.5219, 0.5319],\n","        [0.5151, 0.5218, 0.5292]])\n","\n","Node 77 updated weights:\n","tensor([[0.5462, 0.5418, 0.5251],\n","        [0.4291, 0.5841, 0.4786],\n","        [0.5323, 0.5303, 0.5393]])\n","\n","Node 78 updated weights:\n","tensor([[0.5909, 0.5878, 0.5563],\n","        [0.4595, 0.6029, 0.5590],\n","        [0.5011, 0.5005, 0.5060]])\n","\n","Node 79 updated weights:\n","tensor([[0.5414, 0.5205, 0.5433],\n","        [0.4252, 0.5707, 0.5386],\n","        [0.5800, 0.5676, 0.5983]])\n","\n","Node 80 updated weights:\n","tensor([[0.6359, 0.5672, 0.5404],\n","        [0.4350, 0.5313, 0.5431],\n","        [0.5548, 0.5760, 0.5629]])\n","\n","Node 81 updated weights:\n","tensor([[0.6170, 0.5670, 0.5399],\n","        [0.4309, 0.5588, 0.4961],\n","        [0.5103, 0.5410, 0.5510]])\n","\n","Node 82 updated weights:\n","tensor([[0.6009, 0.5364, 0.5246],\n","        [0.5142, 0.5692, 0.5086],\n","        [0.5203, 0.5495, 0.5297]])\n","\n","Node 83 updated weights:\n","tensor([[0.6162, 0.5945, 0.5093],\n","        [0.4415, 0.5866, 0.4964],\n","        [0.5551, 0.4901, 0.5534]])\n","\n","Node 84 updated weights:\n","tensor([[0.6276, 0.5963, 0.5289],\n","        [0.4462, 0.5835, 0.5544],\n","        [0.4979, 0.5184, 0.5948]])\n","\n","Node 85 updated weights:\n","tensor([[0.6032, 0.5816, 0.5202],\n","        [0.4239, 0.5571, 0.5334],\n","        [0.5557, 0.5825, 0.5127]])\n","\n","Node 86 updated weights:\n","tensor([[0.5820, 0.5855, 0.5096],\n","        [0.4836, 0.5447, 0.5453],\n","        [0.4926, 0.5849, 0.5572]])\n","\n","Node 87 updated weights:\n","tensor([[0.5572, 0.5678, 0.5200],\n","        [0.4575, 0.5953, 0.4906],\n","        [0.5841, 0.5477, 0.5833]])\n","\n","Node 88 updated weights:\n","tensor([[0.5748, 0.6042, 0.5894],\n","        [0.4432, 0.5758, 0.5309],\n","        [0.5023, 0.5115, 0.5407]])\n","\n","Node 89 updated weights:\n","tensor([[0.5580, 0.5187, 0.5342],\n","        [0.4896, 0.5395, 0.4879],\n","        [0.4897, 0.5041, 0.5164]])\n","\n","Node 90 updated weights:\n","tensor([[0.5935, 0.5298, 0.5374],\n","        [0.4614, 0.5252, 0.4755],\n","        [0.5839, 0.5773, 0.5169]])\n","\n","Node 91 updated weights:\n","tensor([[0.5652, 0.5946, 0.5696],\n","        [0.4305, 0.6098, 0.5421],\n","        [0.5268, 0.5022, 0.5186]])\n","\n","Node 92 updated weights:\n","tensor([[0.5787, 0.5547, 0.5260],\n","        [0.4432, 0.5812, 0.5448],\n","        [0.5373, 0.5183, 0.5569]])\n","\n","Node 93 updated weights:\n","tensor([[0.6038, 0.5792, 0.5094],\n","        [0.4786, 0.5289, 0.5099],\n","        [0.4961, 0.5509, 0.5130]])\n","\n","Node 94 updated weights:\n","tensor([[0.5895, 0.5384, 0.5945],\n","        [0.5005, 0.5161, 0.5168],\n","        [0.5524, 0.5595, 0.5516]])\n","\n","Node 95 updated weights:\n","tensor([[0.6168, 0.5461, 0.5631],\n","        [0.4812, 0.6097, 0.5543],\n","        [0.5239, 0.5610, 0.5881]])\n","\n","Node 96 updated weights:\n","tensor([[0.5928, 0.5998, 0.5195],\n","        [0.4952, 0.5878, 0.4936],\n","        [0.5771, 0.5650, 0.5375]])\n","\n","Node 97 updated weights:\n","tensor([[0.6098, 0.5282, 0.5916],\n","        [0.4420, 0.5172, 0.5513],\n","        [0.4877, 0.5576, 0.5985]])\n","\n","Node 98 updated weights:\n","tensor([[0.6210, 0.5881, 0.5639],\n","        [0.4984, 0.5972, 0.5564],\n","        [0.5295, 0.5216, 0.5512]])\n","\n","Node 99 updated weights:\n","tensor([[0.6331, 0.5718, 0.5234],\n","        [0.4866, 0.5276, 0.4750],\n","        [0.5101, 0.5414, 0.5244]])\n","\n","Node 100 updated weights:\n","tensor([[0.6201, 0.5159, 0.5949],\n","        [0.4287, 0.5846, 0.4928],\n","        [0.5691, 0.5294, 0.5052]])\n","\n","--- Iteration 2 ---\n","Global Matrix (Gi) after averaging:\n","tensor([[0.5871, 0.5577, 0.5504],\n","        [0.4738, 0.5670, 0.5139],\n","        [0.5338, 0.5368, 0.5469]])\n","\n","Node 1 updated weights:\n","tensor([[0.6092, 0.6115, 0.5991],\n","        [0.5294, 0.6046, 0.6111],\n","        [0.5579, 0.6244, 0.6142]])\n","\n","Node 2 updated weights:\n","tensor([[0.6447, 0.6025, 0.6385],\n","        [0.4841, 0.6477, 0.5754],\n","        [0.5690, 0.6030, 0.5620]])\n","\n","Node 3 updated weights:\n","tensor([[0.6341, 0.6290, 0.6229],\n","        [0.4854, 0.6269, 0.5792],\n","        [0.6119, 0.6080, 0.6453]])\n","\n","Node 4 updated weights:\n","tensor([[0.5942, 0.6152, 0.6107],\n","        [0.5206, 0.5837, 0.5464],\n","        [0.5791, 0.5699, 0.6068]])\n","\n","Node 5 updated weights:\n","tensor([[0.6809, 0.6004, 0.6324],\n","        [0.4879, 0.6316, 0.5509],\n","        [0.5548, 0.5586, 0.6273]])\n","\n","Node 6 updated weights:\n","tensor([[0.5893, 0.6060, 0.6459],\n","        [0.5294, 0.6161, 0.5180],\n","        [0.5354, 0.5989, 0.5760]])\n","\n","Node 7 updated weights:\n","tensor([[0.5908, 0.6188, 0.6061],\n","        [0.5592, 0.6018, 0.5749],\n","        [0.6055, 0.6058, 0.5684]])\n","\n","Node 8 updated weights:\n","tensor([[0.6791, 0.5744, 0.5650],\n","        [0.5491, 0.5833, 0.5969],\n","        [0.5945, 0.5679, 0.5925]])\n","\n","Node 9 updated weights:\n","tensor([[0.6757, 0.6446, 0.6111],\n","        [0.4920, 0.6611, 0.5954],\n","        [0.6274, 0.6214, 0.6114]])\n","\n","Node 10 updated weights:\n","tensor([[0.6165, 0.5610, 0.5661],\n","        [0.5565, 0.5872, 0.5416],\n","        [0.5755, 0.6257, 0.6042]])\n","\n","Node 11 updated weights:\n","tensor([[0.5876, 0.5689, 0.6012],\n","        [0.4842, 0.5675, 0.5563],\n","        [0.5847, 0.5542, 0.6106]])\n","\n","Node 12 updated weights:\n","tensor([[0.6256, 0.6013, 0.5835],\n","        [0.5057, 0.5949, 0.5493],\n","        [0.6105, 0.5978, 0.5795]])\n","\n","Node 13 updated weights:\n","tensor([[0.6170, 0.6562, 0.6039],\n","        [0.4937, 0.6340, 0.5330],\n","        [0.5741, 0.5877, 0.5475]])\n","\n","Node 14 updated weights:\n","tensor([[0.6688, 0.5740, 0.5964],\n","        [0.5181, 0.6313, 0.5651],\n","        [0.5341, 0.5719, 0.5987]])\n","\n","Node 15 updated weights:\n","tensor([[0.6455, 0.5625, 0.6216],\n","        [0.5244, 0.6324, 0.5903],\n","        [0.5596, 0.6197, 0.5633]])\n","\n","Node 16 updated weights:\n","tensor([[0.6623, 0.6453, 0.5510],\n","        [0.4898, 0.6245, 0.5875],\n","        [0.6187, 0.6241, 0.5888]])\n","\n","Node 17 updated weights:\n","tensor([[0.6416, 0.5687, 0.5564],\n","        [0.5075, 0.6261, 0.5948],\n","        [0.6080, 0.6312, 0.6258]])\n","\n","Node 18 updated weights:\n","tensor([[0.6614, 0.5613, 0.6477],\n","        [0.4985, 0.6220, 0.5799],\n","        [0.5739, 0.5882, 0.5883]])\n","\n","Node 19 updated weights:\n","tensor([[0.6562, 0.5815, 0.6155],\n","        [0.4891, 0.6026, 0.5580],\n","        [0.5600, 0.5902, 0.6423]])\n","\n","Node 20 updated weights:\n","tensor([[0.5942, 0.6546, 0.6035],\n","        [0.4850, 0.6236, 0.5194],\n","        [0.5690, 0.5992, 0.6286]])\n","\n","Node 21 updated weights:\n","tensor([[0.6757, 0.5847, 0.6036],\n","        [0.5369, 0.6048, 0.5477],\n","        [0.6260, 0.5569, 0.6390]])\n","\n","Node 22 updated weights:\n","tensor([[0.6165, 0.6189, 0.6421],\n","        [0.5580, 0.6532, 0.5889],\n","        [0.6114, 0.5737, 0.5688]])\n","\n","Node 23 updated weights:\n","tensor([[0.6417, 0.6511, 0.6238],\n","        [0.5141, 0.6208, 0.5246],\n","        [0.5775, 0.5430, 0.5765]])\n","\n","Node 24 updated weights:\n","tensor([[0.6836, 0.5830, 0.6282],\n","        [0.5044, 0.6261, 0.5338],\n","        [0.5862, 0.5943, 0.6012]])\n","\n","Node 25 updated weights:\n","tensor([[0.6630, 0.5821, 0.5686],\n","        [0.5369, 0.5793, 0.5736],\n","        [0.5748, 0.5783, 0.5810]])\n","\n","Node 26 updated weights:\n","tensor([[0.6569, 0.6574, 0.5888],\n","        [0.5498, 0.5776, 0.5821],\n","        [0.5453, 0.6333, 0.5676]])\n","\n","Node 27 updated weights:\n","tensor([[0.6595, 0.6465, 0.6409],\n","        [0.5696, 0.5882, 0.6011],\n","        [0.6263, 0.6019, 0.5901]])\n","\n","Node 28 updated weights:\n","tensor([[0.6290, 0.6560, 0.5973],\n","        [0.5307, 0.6078, 0.5740],\n","        [0.5597, 0.5635, 0.5801]])\n","\n","Node 29 updated weights:\n","tensor([[0.6649, 0.6091, 0.5973],\n","        [0.5302, 0.5732, 0.5833],\n","        [0.6084, 0.5800, 0.5724]])\n","\n","Node 30 updated weights:\n","tensor([[0.6674, 0.5859, 0.6059],\n","        [0.5529, 0.6133, 0.5728],\n","        [0.6027, 0.6011, 0.6138]])\n","\n","Node 31 updated weights:\n","tensor([[0.6378, 0.6312, 0.6096],\n","        [0.5000, 0.6276, 0.5521],\n","        [0.6109, 0.6016, 0.5713]])\n","\n","Node 32 updated weights:\n","tensor([[0.6272, 0.5659, 0.6000],\n","        [0.4742, 0.6609, 0.5893],\n","        [0.5865, 0.5526, 0.6021]])\n","\n","Node 33 updated weights:\n","tensor([[0.6421, 0.5927, 0.5743],\n","        [0.5571, 0.6308, 0.5889],\n","        [0.6069, 0.6349, 0.6463]])\n","\n","Node 34 updated weights:\n","tensor([[0.6321, 0.6164, 0.6152],\n","        [0.4917, 0.5830, 0.6055],\n","        [0.6253, 0.6142, 0.6026]])\n","\n","Node 35 updated weights:\n","tensor([[0.6377, 0.6373, 0.5995],\n","        [0.5315, 0.6102, 0.6027],\n","        [0.5987, 0.5805, 0.6217]])\n","\n","Node 36 updated weights:\n","tensor([[0.6198, 0.6571, 0.5996],\n","        [0.5617, 0.6529, 0.6096],\n","        [0.5340, 0.5580, 0.5989]])\n","\n","Node 37 updated weights:\n","tensor([[0.6116, 0.6461, 0.5852],\n","        [0.5310, 0.5871, 0.5917],\n","        [0.5476, 0.5988, 0.5570]])\n","\n","Node 38 updated weights:\n","tensor([[0.6777, 0.6249, 0.6379],\n","        [0.5241, 0.5819, 0.5529],\n","        [0.5769, 0.5877, 0.5593]])\n","\n","Node 39 updated weights:\n","tensor([[0.5954, 0.6143, 0.6496],\n","        [0.4791, 0.5748, 0.5818],\n","        [0.6216, 0.6023, 0.5941]])\n","\n","Node 40 updated weights:\n","tensor([[0.5953, 0.6222, 0.5826],\n","        [0.4887, 0.5806, 0.5803],\n","        [0.5474, 0.6021, 0.5528]])\n","\n","Node 41 updated weights:\n","tensor([[0.5917, 0.6501, 0.6477],\n","        [0.4768, 0.5897, 0.5456],\n","        [0.5853, 0.5834, 0.5663]])\n","\n","Node 42 updated weights:\n","tensor([[0.6222, 0.6508, 0.6206],\n","        [0.5465, 0.6211, 0.5574],\n","        [0.5645, 0.6041, 0.5707]])\n","\n","Node 43 updated weights:\n","tensor([[0.6441, 0.6495, 0.5617],\n","        [0.5028, 0.6230, 0.5736],\n","        [0.5850, 0.5958, 0.5580]])\n","\n","Node 44 updated weights:\n","tensor([[0.6348, 0.6281, 0.6045],\n","        [0.5238, 0.6547, 0.6137],\n","        [0.5637, 0.6055, 0.5823]])\n","\n","Node 45 updated weights:\n","tensor([[0.6276, 0.6083, 0.5649],\n","        [0.5448, 0.5742, 0.6090],\n","        [0.5730, 0.6198, 0.6308]])\n","\n","Node 46 updated weights:\n","tensor([[0.5874, 0.5845, 0.5820],\n","        [0.4932, 0.6296, 0.5397],\n","        [0.6185, 0.5658, 0.6298]])\n","\n","Node 47 updated weights:\n","tensor([[0.6713, 0.6365, 0.6063],\n","        [0.4803, 0.5948, 0.5759],\n","        [0.5967, 0.5832, 0.6180]])\n","\n","Node 48 updated weights:\n","tensor([[0.6197, 0.6248, 0.6367],\n","        [0.5576, 0.6473, 0.5786],\n","        [0.5365, 0.6268, 0.5712]])\n","\n","Node 49 updated weights:\n","tensor([[0.6491, 0.6344, 0.5718],\n","        [0.5152, 0.6072, 0.5333],\n","        [0.5597, 0.5861, 0.5540]])\n","\n","Node 50 updated weights:\n","tensor([[0.6747, 0.5759, 0.5681],\n","        [0.5086, 0.6135, 0.5752],\n","        [0.6042, 0.6354, 0.6010]])\n","\n","Node 51 updated weights:\n","tensor([[0.6774, 0.5611, 0.6308],\n","        [0.5320, 0.5904, 0.5784],\n","        [0.6147, 0.6366, 0.6272]])\n","\n","Node 52 updated weights:\n","tensor([[0.6708, 0.6078, 0.6324],\n","        [0.4943, 0.6259, 0.6070],\n","        [0.5380, 0.5546, 0.6167]])\n","\n","Node 53 updated weights:\n","tensor([[0.6422, 0.6211, 0.6037],\n","        [0.4841, 0.6323, 0.5885],\n","        [0.6163, 0.5451, 0.6332]])\n","\n","Node 54 updated weights:\n","tensor([[0.6309, 0.5900, 0.6168],\n","        [0.5687, 0.6605, 0.5555],\n","        [0.5505, 0.5452, 0.6270]])\n","\n","Node 55 updated weights:\n","tensor([[0.6856, 0.6526, 0.5605],\n","        [0.5571, 0.6172, 0.5332],\n","        [0.5472, 0.6074, 0.5701]])\n","\n","Node 56 updated weights:\n","tensor([[0.6789, 0.6459, 0.5767],\n","        [0.4790, 0.6542, 0.5528],\n","        [0.5795, 0.6030, 0.5666]])\n","\n","Node 57 updated weights:\n","tensor([[0.6314, 0.5960, 0.6301],\n","        [0.5507, 0.6474, 0.6021],\n","        [0.5929, 0.5952, 0.5599]])\n","\n","Node 58 updated weights:\n","tensor([[0.6304, 0.6445, 0.6316],\n","        [0.4779, 0.6581, 0.5383],\n","        [0.5743, 0.5424, 0.5820]])\n","\n","Node 59 updated weights:\n","tensor([[0.6803, 0.5907, 0.6099],\n","        [0.5316, 0.6178, 0.5893],\n","        [0.5519, 0.5668, 0.6420]])\n","\n","Node 60 updated weights:\n","tensor([[0.6840, 0.6137, 0.6469],\n","        [0.5465, 0.6119, 0.6012],\n","        [0.5847, 0.5372, 0.6405]])\n","\n","Node 61 updated weights:\n","tensor([[0.6821, 0.5668, 0.5702],\n","        [0.5474, 0.6452, 0.6068],\n","        [0.5479, 0.6037, 0.5973]])\n","\n","Node 62 updated weights:\n","tensor([[0.6496, 0.5928, 0.6386],\n","        [0.5705, 0.6638, 0.5437],\n","        [0.5428, 0.5793, 0.6061]])\n","\n","Node 63 updated weights:\n","tensor([[0.6040, 0.5694, 0.5574],\n","        [0.5353, 0.5860, 0.5687],\n","        [0.5981, 0.6089, 0.6266]])\n","\n","Node 64 updated weights:\n","tensor([[0.6262, 0.6282, 0.6360],\n","        [0.5270, 0.5721, 0.5511],\n","        [0.5653, 0.5480, 0.6314]])\n","\n","Node 65 updated weights:\n","tensor([[0.6331, 0.5883, 0.5740],\n","        [0.4948, 0.6466, 0.5369],\n","        [0.5501, 0.5544, 0.6309]])\n","\n","Node 66 updated weights:\n","tensor([[0.6525, 0.5704, 0.5786],\n","        [0.5538, 0.5748, 0.5296],\n","        [0.6087, 0.5681, 0.6220]])\n","\n","Node 67 updated weights:\n","tensor([[0.6602, 0.5757, 0.6097],\n","        [0.5366, 0.6179, 0.5770],\n","        [0.6285, 0.5723, 0.5836]])\n","\n","Node 68 updated weights:\n","tensor([[0.6000, 0.5795, 0.6214],\n","        [0.5359, 0.6465, 0.5266],\n","        [0.5619, 0.5881, 0.5607]])\n","\n","Node 69 updated weights:\n","tensor([[0.5906, 0.5813, 0.5969],\n","        [0.4997, 0.6319, 0.5291],\n","        [0.5771, 0.6069, 0.6359]])\n","\n","Node 70 updated weights:\n","tensor([[0.6173, 0.6311, 0.6036],\n","        [0.5009, 0.6670, 0.5539],\n","        [0.5418, 0.5555, 0.6326]])\n","\n","Node 71 updated weights:\n","tensor([[0.6135, 0.6323, 0.6088],\n","        [0.5222, 0.6447, 0.5829],\n","        [0.6041, 0.5539, 0.6285]])\n","\n","Node 72 updated weights:\n","tensor([[0.5939, 0.5817, 0.5519],\n","        [0.4834, 0.6295, 0.5445],\n","        [0.6103, 0.5882, 0.5482]])\n","\n","Node 73 updated weights:\n","tensor([[0.6768, 0.5699, 0.5746],\n","        [0.5073, 0.6486, 0.5926],\n","        [0.5844, 0.6241, 0.5990]])\n","\n","Node 74 updated weights:\n","tensor([[0.6183, 0.6153, 0.5949],\n","        [0.5092, 0.6489, 0.6043],\n","        [0.5707, 0.6315, 0.5848]])\n","\n","Node 75 updated weights:\n","tensor([[0.6168, 0.5680, 0.5520],\n","        [0.5526, 0.5967, 0.5207],\n","        [0.5900, 0.5596, 0.5591]])\n","\n","Node 76 updated weights:\n","tensor([[0.6411, 0.5943, 0.6206],\n","        [0.5116, 0.6248, 0.5733],\n","        [0.6286, 0.5851, 0.5668]])\n","\n","Node 77 updated weights:\n","tensor([[0.6314, 0.5802, 0.6259],\n","        [0.5163, 0.6321, 0.5548],\n","        [0.5765, 0.5636, 0.5644]])\n","\n","Node 78 updated weights:\n","tensor([[0.6604, 0.5788, 0.5721],\n","        [0.5118, 0.5951, 0.5764],\n","        [0.5694, 0.5731, 0.6165]])\n","\n","Node 79 updated weights:\n","tensor([[0.6179, 0.5758, 0.6427],\n","        [0.5406, 0.6028, 0.5896],\n","        [0.6018, 0.5971, 0.5928]])\n","\n","Node 80 updated weights:\n","tensor([[0.6625, 0.6021, 0.5509],\n","        [0.5368, 0.5887, 0.5405],\n","        [0.5812, 0.5569, 0.6409]])\n","\n","Node 81 updated weights:\n","tensor([[0.6828, 0.5649, 0.5684],\n","        [0.5083, 0.6650, 0.5355],\n","        [0.5729, 0.6259, 0.6328]])\n","\n","Node 82 updated weights:\n","tensor([[0.6636, 0.6028, 0.5587],\n","        [0.5160, 0.6069, 0.5492],\n","        [0.6149, 0.5587, 0.5481]])\n","\n","Node 83 updated weights:\n","tensor([[0.6711, 0.6346, 0.6486],\n","        [0.5455, 0.5832, 0.6073],\n","        [0.5970, 0.6338, 0.5677]])\n","\n","Node 84 updated weights:\n","tensor([[0.6158, 0.6086, 0.5562],\n","        [0.4847, 0.6444, 0.5231],\n","        [0.5707, 0.5958, 0.6008]])\n","\n","Node 85 updated weights:\n","tensor([[0.6871, 0.5658, 0.5669],\n","        [0.4976, 0.5918, 0.6061],\n","        [0.6232, 0.5675, 0.6087]])\n","\n","Node 86 updated weights:\n","tensor([[0.6439, 0.6058, 0.5557],\n","        [0.4775, 0.6481, 0.5231],\n","        [0.5623, 0.5709, 0.5685]])\n","\n","Node 87 updated weights:\n","tensor([[0.5950, 0.5915, 0.5765],\n","        [0.5161, 0.6543, 0.5635],\n","        [0.6269, 0.6028, 0.6409]])\n","\n","Node 88 updated weights:\n","tensor([[0.6375, 0.5686, 0.5654],\n","        [0.4888, 0.5717, 0.5473],\n","        [0.5385, 0.6366, 0.5900]])\n","\n","Node 89 updated weights:\n","tensor([[0.6000, 0.6039, 0.5747],\n","        [0.4829, 0.5980, 0.6087],\n","        [0.5597, 0.6124, 0.5975]])\n","\n","Node 90 updated weights:\n","tensor([[0.6769, 0.6045, 0.6272],\n","        [0.5286, 0.6010, 0.5831],\n","        [0.5635, 0.5759, 0.5756]])\n","\n","Node 91 updated weights:\n","tensor([[0.5898, 0.5707, 0.5654],\n","        [0.5028, 0.5795, 0.5735],\n","        [0.6150, 0.5510, 0.5829]])\n","\n","Node 92 updated weights:\n","tensor([[0.6425, 0.5917, 0.5659],\n","        [0.5045, 0.5983, 0.5494],\n","        [0.5691, 0.5548, 0.6078]])\n","\n","Node 93 updated weights:\n","tensor([[0.5911, 0.5794, 0.5729],\n","        [0.5527, 0.5785, 0.5870],\n","        [0.6257, 0.5467, 0.5887]])\n","\n","Node 94 updated weights:\n","tensor([[0.6660, 0.5823, 0.5922],\n","        [0.5604, 0.6468, 0.5206],\n","        [0.6264, 0.5996, 0.6244]])\n","\n","Node 95 updated weights:\n","tensor([[0.6398, 0.5837, 0.6040],\n","        [0.5565, 0.5757, 0.5448],\n","        [0.6008, 0.6053, 0.5730]])\n","\n","Node 96 updated weights:\n","tensor([[0.5960, 0.6062, 0.6368],\n","        [0.5085, 0.5793, 0.5171],\n","        [0.5648, 0.6055, 0.5922]])\n","\n","Node 97 updated weights:\n","tensor([[0.5908, 0.6148, 0.5895],\n","        [0.4908, 0.6441, 0.5917],\n","        [0.6017, 0.6043, 0.6281]])\n","\n","Node 98 updated weights:\n","tensor([[0.5916, 0.5763, 0.6011],\n","        [0.5048, 0.6312, 0.5720],\n","        [0.6081, 0.6084, 0.6265]])\n","\n","Node 99 updated weights:\n","tensor([[0.6656, 0.6201, 0.5620],\n","        [0.5562, 0.5875, 0.5567],\n","        [0.5367, 0.6102, 0.5578]])\n","\n","Node 100 updated weights:\n","tensor([[0.6286, 0.6460, 0.5980],\n","        [0.5031, 0.6214, 0.5270],\n","        [0.5775, 0.6335, 0.5862]])\n","\n","--- Iteration 3 ---\n","Global Matrix (Gi) after averaging:\n","tensor([[0.6377, 0.6049, 0.5990],\n","        [0.5186, 0.6158, 0.5670],\n","        [0.5831, 0.5896, 0.5965]])\n","\n","Node 1 updated weights:\n","tensor([[0.6735, 0.6716, 0.6869],\n","        [0.5677, 0.6698, 0.5786],\n","        [0.6648, 0.6584, 0.6450]])\n","\n","Node 2 updated weights:\n","tensor([[0.6718, 0.6065, 0.6235],\n","        [0.5887, 0.6917, 0.6293],\n","        [0.6217, 0.6856, 0.6173]])\n","\n","Node 3 updated weights:\n","tensor([[0.7029, 0.7042, 0.6026],\n","        [0.6158, 0.6629, 0.6147],\n","        [0.6571, 0.6859, 0.6294]])\n","\n","Node 4 updated weights:\n","tensor([[0.6382, 0.6488, 0.6909],\n","        [0.5577, 0.6217, 0.6388],\n","        [0.6496, 0.6295, 0.6680]])\n","\n","Node 5 updated weights:\n","tensor([[0.6809, 0.6298, 0.6228],\n","        [0.5911, 0.6170, 0.6499],\n","        [0.6443, 0.5929, 0.6725]])\n","\n","Node 6 updated weights:\n","tensor([[0.6504, 0.6971, 0.6802],\n","        [0.5944, 0.7131, 0.5755],\n","        [0.6487, 0.6790, 0.6250]])\n","\n","Node 7 updated weights:\n","tensor([[0.6483, 0.6138, 0.6349],\n","        [0.5704, 0.6856, 0.6014],\n","        [0.6001, 0.6562, 0.6345]])\n","\n","Node 8 updated weights:\n","tensor([[0.6818, 0.6223, 0.6784],\n","        [0.5588, 0.6583, 0.5872],\n","        [0.5976, 0.6228, 0.6284]])\n","\n","Node 9 updated weights:\n","tensor([[0.7115, 0.6232, 0.6840],\n","        [0.5339, 0.6645, 0.6498],\n","        [0.6373, 0.5942, 0.6643]])\n","\n","Node 10 updated weights:\n","tensor([[0.7238, 0.6583, 0.6648],\n","        [0.5740, 0.6261, 0.6520],\n","        [0.6464, 0.6815, 0.6026]])\n","\n","Node 11 updated weights:\n","tensor([[0.6562, 0.6646, 0.6367],\n","        [0.5765, 0.6547, 0.6042],\n","        [0.5857, 0.6292, 0.6765]])\n","\n","Node 12 updated weights:\n","tensor([[0.7357, 0.6617, 0.6497],\n","        [0.5963, 0.6798, 0.6179],\n","        [0.6744, 0.6796, 0.6221]])\n","\n","Node 13 updated weights:\n","tensor([[0.6478, 0.6870, 0.6740],\n","        [0.6059, 0.6843, 0.5935],\n","        [0.6798, 0.6156, 0.6656]])\n","\n","Node 14 updated weights:\n","tensor([[0.6533, 0.6455, 0.6334],\n","        [0.5680, 0.7019, 0.6652],\n","        [0.5854, 0.6081, 0.6853]])\n","\n","Node 15 updated weights:\n","tensor([[0.6556, 0.6410, 0.6213],\n","        [0.5292, 0.6503, 0.6120],\n","        [0.6646, 0.5943, 0.6790]])\n","\n","Node 16 updated weights:\n","tensor([[0.6909, 0.6701, 0.6783],\n","        [0.5328, 0.7110, 0.5686],\n","        [0.5945, 0.6291, 0.6757]])\n","\n","Node 17 updated weights:\n","tensor([[0.6894, 0.7049, 0.6197],\n","        [0.5738, 0.6609, 0.6546],\n","        [0.6082, 0.6150, 0.6635]])\n","\n","Node 18 updated weights:\n","tensor([[0.7184, 0.6091, 0.6092],\n","        [0.6176, 0.6817, 0.6298],\n","        [0.6200, 0.6098, 0.6345]])\n","\n","Node 19 updated weights:\n","tensor([[0.6604, 0.6853, 0.6905],\n","        [0.5323, 0.7095, 0.6402],\n","        [0.6363, 0.6611, 0.6299]])\n","\n","Node 20 updated weights:\n","tensor([[0.7110, 0.6966, 0.6914],\n","        [0.5669, 0.6807, 0.5719],\n","        [0.6453, 0.6054, 0.6531]])\n","\n","Node 21 updated weights:\n","tensor([[0.6731, 0.6988, 0.6330],\n","        [0.5775, 0.6393, 0.6660],\n","        [0.5874, 0.6617, 0.6543]])\n","\n","Node 22 updated weights:\n","tensor([[0.6556, 0.6456, 0.6516],\n","        [0.5197, 0.6501, 0.6268],\n","        [0.6273, 0.6786, 0.6002]])\n","\n","Node 23 updated weights:\n","tensor([[0.7267, 0.6327, 0.6179],\n","        [0.5834, 0.6732, 0.6147],\n","        [0.6443, 0.6090, 0.6613]])\n","\n","Node 24 updated weights:\n","tensor([[0.7138, 0.6062, 0.6859],\n","        [0.5235, 0.6453, 0.6163],\n","        [0.6373, 0.6782, 0.6623]])\n","\n","Node 25 updated weights:\n","tensor([[0.7362, 0.6598, 0.6196],\n","        [0.5341, 0.6684, 0.6189],\n","        [0.6056, 0.6497, 0.6895]])\n","\n","Node 26 updated weights:\n","tensor([[0.6830, 0.6209, 0.6903],\n","        [0.5883, 0.7141, 0.6498],\n","        [0.6297, 0.6230, 0.6882]])\n","\n","Node 27 updated weights:\n","tensor([[0.6629, 0.6959, 0.6192],\n","        [0.5870, 0.6301, 0.6153],\n","        [0.6497, 0.6108, 0.6009]])\n","\n","Node 28 updated weights:\n","tensor([[0.7282, 0.6749, 0.6538],\n","        [0.5741, 0.6525, 0.6104],\n","        [0.6373, 0.6889, 0.6904]])\n","\n","Node 29 updated weights:\n","tensor([[0.7001, 0.6357, 0.6698],\n","        [0.5886, 0.6927, 0.6323],\n","        [0.6232, 0.6119, 0.6321]])\n","\n","Node 30 updated weights:\n","tensor([[0.6396, 0.6306, 0.6953],\n","        [0.6002, 0.6173, 0.5783],\n","        [0.6217, 0.6695, 0.6675]])\n","\n","Node 31 updated weights:\n","tensor([[0.7355, 0.6614, 0.6293],\n","        [0.6057, 0.7004, 0.6100],\n","        [0.6064, 0.5931, 0.6876]])\n","\n","Node 32 updated weights:\n","tensor([[0.6997, 0.6698, 0.6038],\n","        [0.5398, 0.6796, 0.6366],\n","        [0.6818, 0.6142, 0.6360]])\n","\n","Node 33 updated weights:\n","tensor([[0.7238, 0.6359, 0.6110],\n","        [0.5866, 0.6936, 0.6218],\n","        [0.6512, 0.6755, 0.6449]])\n","\n","Node 34 updated weights:\n","tensor([[0.6722, 0.6793, 0.6679],\n","        [0.5469, 0.6321, 0.6135],\n","        [0.6449, 0.6446, 0.6104]])\n","\n","Node 35 updated weights:\n","tensor([[0.7044, 0.6868, 0.6551],\n","        [0.5366, 0.6957, 0.6005],\n","        [0.5857, 0.6807, 0.6684]])\n","\n","Node 36 updated weights:\n","tensor([[0.6522, 0.6170, 0.6689],\n","        [0.6179, 0.7001, 0.6215],\n","        [0.6433, 0.6783, 0.6752]])\n","\n","Node 37 updated weights:\n","tensor([[0.6566, 0.6052, 0.6393],\n","        [0.5579, 0.6764, 0.6255],\n","        [0.5963, 0.5997, 0.6169]])\n","\n","Node 38 updated weights:\n","tensor([[0.6876, 0.6852, 0.6115],\n","        [0.5571, 0.6252, 0.6133],\n","        [0.6341, 0.6711, 0.6063]])\n","\n","Node 39 updated weights:\n","tensor([[0.6465, 0.6448, 0.6883],\n","        [0.5333, 0.6520, 0.6421],\n","        [0.6017, 0.6538, 0.6066]])\n","\n","Node 40 updated weights:\n","tensor([[0.6968, 0.6636, 0.5995],\n","        [0.5887, 0.6375, 0.6139],\n","        [0.6756, 0.6653, 0.6094]])\n","\n","Node 41 updated weights:\n","tensor([[0.6709, 0.6717, 0.6393],\n","        [0.5244, 0.6719, 0.5946],\n","        [0.5999, 0.6459, 0.6815]])\n","\n","Node 42 updated weights:\n","tensor([[0.6657, 0.6711, 0.6544],\n","        [0.5618, 0.6371, 0.6289],\n","        [0.6192, 0.6841, 0.6845]])\n","\n","Node 43 updated weights:\n","tensor([[0.7154, 0.6788, 0.6238],\n","        [0.5972, 0.6893, 0.5925],\n","        [0.6304, 0.6204, 0.6960]])\n","\n","Node 44 updated weights:\n","tensor([[0.6774, 0.6676, 0.6127],\n","        [0.5869, 0.6495, 0.5795],\n","        [0.5992, 0.5917, 0.6160]])\n","\n","Node 45 updated weights:\n","tensor([[0.7006, 0.6809, 0.5998],\n","        [0.5492, 0.6344, 0.6449],\n","        [0.6185, 0.6835, 0.6636]])\n","\n","Node 46 updated weights:\n","tensor([[0.7308, 0.6331, 0.6008],\n","        [0.5388, 0.7048, 0.5890],\n","        [0.6816, 0.6290, 0.6739]])\n","\n","Node 47 updated weights:\n","tensor([[0.6588, 0.6318, 0.6389],\n","        [0.5956, 0.6383, 0.6129],\n","        [0.6528, 0.6108, 0.6089]])\n","\n","Node 48 updated weights:\n","tensor([[0.6449, 0.6516, 0.6000],\n","        [0.5366, 0.7134, 0.5943],\n","        [0.5874, 0.6588, 0.6304]])\n","\n","Node 49 updated weights:\n","tensor([[0.6858, 0.6481, 0.6129],\n","        [0.5777, 0.6806, 0.6369],\n","        [0.5860, 0.6469, 0.6225]])\n","\n","Node 50 updated weights:\n","tensor([[0.6746, 0.6942, 0.6710],\n","        [0.5960, 0.6841, 0.5894],\n","        [0.6450, 0.6460, 0.6119]])\n","\n","Node 51 updated weights:\n","tensor([[0.6976, 0.6902, 0.6988],\n","        [0.5626, 0.7027, 0.5804],\n","        [0.6452, 0.6377, 0.6092]])\n","\n","Node 52 updated weights:\n","tensor([[0.6687, 0.6632, 0.6211],\n","        [0.5622, 0.6605, 0.6265],\n","        [0.6754, 0.6805, 0.6054]])\n","\n","Node 53 updated weights:\n","tensor([[0.7157, 0.6604, 0.6980],\n","        [0.6062, 0.6550, 0.6088],\n","        [0.6143, 0.6794, 0.6745]])\n","\n","Node 54 updated weights:\n","tensor([[0.7143, 0.6933, 0.6782],\n","        [0.5369, 0.6479, 0.6188],\n","        [0.6296, 0.6857, 0.6356]])\n","\n","Node 55 updated weights:\n","tensor([[0.6495, 0.6904, 0.6084],\n","        [0.5771, 0.6190, 0.6429],\n","        [0.6721, 0.5955, 0.6072]])\n","\n","Node 56 updated weights:\n","tensor([[0.6658, 0.6696, 0.6756],\n","        [0.6174, 0.7086, 0.5688],\n","        [0.5921, 0.6345, 0.6325]])\n","\n","Node 57 updated weights:\n","tensor([[0.7329, 0.6550, 0.6033],\n","        [0.5617, 0.7067, 0.5906],\n","        [0.5941, 0.5946, 0.6553]])\n","\n","Node 58 updated weights:\n","tensor([[0.6414, 0.6778, 0.6476],\n","        [0.5246, 0.6692, 0.5906],\n","        [0.5981, 0.6539, 0.5983]])\n","\n","Node 59 updated weights:\n","tensor([[0.7216, 0.6583, 0.6897],\n","        [0.5497, 0.6605, 0.6475],\n","        [0.6074, 0.6677, 0.6614]])\n","\n","Node 60 updated weights:\n","tensor([[0.7226, 0.6926, 0.6235],\n","        [0.5581, 0.6935, 0.6189],\n","        [0.6727, 0.6445, 0.6923]])\n","\n","Node 61 updated weights:\n","tensor([[0.7302, 0.6649, 0.6937],\n","        [0.5224, 0.6300, 0.5890],\n","        [0.5854, 0.6176, 0.6953]])\n","\n","Node 62 updated weights:\n","tensor([[0.7082, 0.6089, 0.6196],\n","        [0.5592, 0.6648, 0.6591],\n","        [0.6534, 0.6552, 0.6149]])\n","\n","Node 63 updated weights:\n","tensor([[0.6877, 0.7036, 0.6731],\n","        [0.5629, 0.6620, 0.6163],\n","        [0.6615, 0.6696, 0.6416]])\n","\n","Node 64 updated weights:\n","tensor([[0.6901, 0.6656, 0.6483],\n","        [0.5257, 0.6777, 0.5979],\n","        [0.6750, 0.5925, 0.6582]])\n","\n","Node 65 updated weights:\n","tensor([[0.6513, 0.6989, 0.6398],\n","        [0.5354, 0.6767, 0.5903],\n","        [0.6243, 0.6243, 0.6045]])\n","\n","Node 66 updated weights:\n","tensor([[0.6469, 0.6616, 0.6564],\n","        [0.6136, 0.6486, 0.6594],\n","        [0.6167, 0.6506, 0.6446]])\n","\n","Node 67 updated weights:\n","tensor([[0.7318, 0.6861, 0.6930],\n","        [0.6010, 0.7123, 0.6523],\n","        [0.6729, 0.6093, 0.6676]])\n","\n","Node 68 updated weights:\n","tensor([[0.7303, 0.6923, 0.6372],\n","        [0.5422, 0.6328, 0.6186],\n","        [0.6646, 0.6657, 0.6612]])\n","\n","Node 69 updated weights:\n","tensor([[0.6526, 0.6599, 0.6648],\n","        [0.5583, 0.7123, 0.6340],\n","        [0.6774, 0.6575, 0.6745]])\n","\n","Node 70 updated weights:\n","tensor([[0.6657, 0.6394, 0.6051],\n","        [0.5630, 0.6720, 0.6473],\n","        [0.6022, 0.6736, 0.6413]])\n","\n","Node 71 updated weights:\n","tensor([[0.6648, 0.6571, 0.6438],\n","        [0.5349, 0.7088, 0.6287],\n","        [0.6116, 0.6009, 0.6290]])\n","\n","Node 72 updated weights:\n","tensor([[0.6816, 0.6884, 0.6823],\n","        [0.5450, 0.6403, 0.6399],\n","        [0.6673, 0.6435, 0.6349]])\n","\n","Node 73 updated weights:\n","tensor([[0.7368, 0.6540, 0.6015],\n","        [0.5322, 0.6486, 0.6494],\n","        [0.6704, 0.6257, 0.6297]])\n","\n","Node 74 updated weights:\n","tensor([[0.6463, 0.6739, 0.6893],\n","        [0.5577, 0.6875, 0.6347],\n","        [0.5911, 0.6129, 0.6052]])\n","\n","Node 75 updated weights:\n","tensor([[0.6883, 0.6240, 0.6107],\n","        [0.5331, 0.6963, 0.5750],\n","        [0.6039, 0.6308, 0.6281]])\n","\n","Node 76 updated weights:\n","tensor([[0.6735, 0.6506, 0.6863],\n","        [0.5359, 0.6683, 0.5723],\n","        [0.6447, 0.6548, 0.6282]])\n","\n","Node 77 updated weights:\n","tensor([[0.7348, 0.6609, 0.6276],\n","        [0.5772, 0.6904, 0.5900],\n","        [0.5940, 0.6694, 0.6671]])\n","\n","Node 78 updated weights:\n","tensor([[0.6742, 0.6349, 0.6584],\n","        [0.5816, 0.6638, 0.6493],\n","        [0.6316, 0.6094, 0.6880]])\n","\n","Node 79 updated weights:\n","tensor([[0.6897, 0.7016, 0.6929],\n","        [0.5826, 0.6690, 0.5998],\n","        [0.6381, 0.5924, 0.6607]])\n","\n","Node 80 updated weights:\n","tensor([[0.7029, 0.6405, 0.6632],\n","        [0.5446, 0.6608, 0.6254],\n","        [0.6544, 0.6804, 0.6085]])\n","\n","Node 81 updated weights:\n","tensor([[0.6674, 0.6932, 0.6674],\n","        [0.5634, 0.7016, 0.6456],\n","        [0.6212, 0.6749, 0.6690]])\n","\n","Node 82 updated weights:\n","tensor([[0.6682, 0.6359, 0.6735],\n","        [0.5406, 0.6774, 0.6274],\n","        [0.6406, 0.6102, 0.6935]])\n","\n","Node 83 updated weights:\n","tensor([[0.7173, 0.6518, 0.6924],\n","        [0.5197, 0.6400, 0.6274],\n","        [0.6251, 0.6121, 0.6312]])\n","\n","Node 84 updated weights:\n","tensor([[0.7222, 0.6683, 0.6735],\n","        [0.5863, 0.6636, 0.6467],\n","        [0.6484, 0.6441, 0.6893]])\n","\n","Node 85 updated weights:\n","tensor([[0.6949, 0.6224, 0.6720],\n","        [0.5945, 0.6430, 0.6156],\n","        [0.5914, 0.6407, 0.6209]])\n","\n","Node 86 updated weights:\n","tensor([[0.7230, 0.6752, 0.6829],\n","        [0.5822, 0.6255, 0.6530],\n","        [0.6520, 0.6746, 0.6620]])\n","\n","Node 87 updated weights:\n","tensor([[0.7252, 0.6885, 0.6237],\n","        [0.5786, 0.7044, 0.5882],\n","        [0.6034, 0.6323, 0.6309]])\n","\n","Node 88 updated weights:\n","tensor([[0.7157, 0.6142, 0.6624],\n","        [0.5438, 0.6517, 0.6211],\n","        [0.6118, 0.6294, 0.6434]])\n","\n","Node 89 updated weights:\n","tensor([[0.6717, 0.6331, 0.6594],\n","        [0.5238, 0.6492, 0.6632],\n","        [0.6249, 0.6067, 0.6744]])\n","\n","Node 90 updated weights:\n","tensor([[0.7277, 0.6378, 0.6448],\n","        [0.5681, 0.7035, 0.5892],\n","        [0.6740, 0.6474, 0.6779]])\n","\n","Node 91 updated weights:\n","tensor([[0.7075, 0.7004, 0.6783],\n","        [0.6065, 0.6599, 0.6547],\n","        [0.6192, 0.6767, 0.6464]])\n","\n","Node 92 updated weights:\n","tensor([[0.7202, 0.6695, 0.6197],\n","        [0.6065, 0.6173, 0.5792],\n","        [0.6544, 0.6298, 0.6958]])\n","\n","Node 93 updated weights:\n","tensor([[0.6691, 0.6185, 0.6173],\n","        [0.5385, 0.6219, 0.5724],\n","        [0.5839, 0.6439, 0.6085]])\n","\n","Node 94 updated weights:\n","tensor([[0.6956, 0.6833, 0.6407],\n","        [0.5722, 0.6445, 0.5696],\n","        [0.6408, 0.5911, 0.6271]])\n","\n","Node 95 updated weights:\n","tensor([[0.7344, 0.6089, 0.6188],\n","        [0.5561, 0.6707, 0.6635],\n","        [0.6289, 0.6633, 0.6252]])\n","\n","Node 96 updated weights:\n","tensor([[0.6455, 0.6444, 0.6508],\n","        [0.5453, 0.7092, 0.5861],\n","        [0.5981, 0.6207, 0.6240]])\n","\n","Node 97 updated weights:\n","tensor([[0.7203, 0.6377, 0.6566],\n","        [0.6021, 0.6406, 0.6578],\n","        [0.6451, 0.6492, 0.6614]])\n","\n","Node 98 updated weights:\n","tensor([[0.6743, 0.6630, 0.6064],\n","        [0.6100, 0.6955, 0.6038],\n","        [0.6482, 0.6863, 0.6548]])\n","\n","Node 99 updated weights:\n","tensor([[0.6791, 0.6994, 0.6065],\n","        [0.5447, 0.6905, 0.6107],\n","        [0.5958, 0.6105, 0.6686]])\n","\n","Node 100 updated weights:\n","tensor([[0.6827, 0.6312, 0.6658],\n","        [0.6149, 0.6489, 0.6077],\n","        [0.6079, 0.6610, 0.6006]])\n","\n","--- Final Node Weights After All Iterations ---\n","Node 1 final weights:\n","tensor([[0.6735, 0.6716, 0.6869],\n","        [0.5677, 0.6698, 0.5786],\n","        [0.6648, 0.6584, 0.6450]])\n","\n","Node 2 final weights:\n","tensor([[0.6718, 0.6065, 0.6235],\n","        [0.5887, 0.6917, 0.6293],\n","        [0.6217, 0.6856, 0.6173]])\n","\n","Node 3 final weights:\n","tensor([[0.7029, 0.7042, 0.6026],\n","        [0.6158, 0.6629, 0.6147],\n","        [0.6571, 0.6859, 0.6294]])\n","\n","Node 4 final weights:\n","tensor([[0.6382, 0.6488, 0.6909],\n","        [0.5577, 0.6217, 0.6388],\n","        [0.6496, 0.6295, 0.6680]])\n","\n","Node 5 final weights:\n","tensor([[0.6809, 0.6298, 0.6228],\n","        [0.5911, 0.6170, 0.6499],\n","        [0.6443, 0.5929, 0.6725]])\n","\n","Node 6 final weights:\n","tensor([[0.6504, 0.6971, 0.6802],\n","        [0.5944, 0.7131, 0.5755],\n","        [0.6487, 0.6790, 0.6250]])\n","\n","Node 7 final weights:\n","tensor([[0.6483, 0.6138, 0.6349],\n","        [0.5704, 0.6856, 0.6014],\n","        [0.6001, 0.6562, 0.6345]])\n","\n","Node 8 final weights:\n","tensor([[0.6818, 0.6223, 0.6784],\n","        [0.5588, 0.6583, 0.5872],\n","        [0.5976, 0.6228, 0.6284]])\n","\n","Node 9 final weights:\n","tensor([[0.7115, 0.6232, 0.6840],\n","        [0.5339, 0.6645, 0.6498],\n","        [0.6373, 0.5942, 0.6643]])\n","\n","Node 10 final weights:\n","tensor([[0.7238, 0.6583, 0.6648],\n","        [0.5740, 0.6261, 0.6520],\n","        [0.6464, 0.6815, 0.6026]])\n","\n","Node 11 final weights:\n","tensor([[0.6562, 0.6646, 0.6367],\n","        [0.5765, 0.6547, 0.6042],\n","        [0.5857, 0.6292, 0.6765]])\n","\n","Node 12 final weights:\n","tensor([[0.7357, 0.6617, 0.6497],\n","        [0.5963, 0.6798, 0.6179],\n","        [0.6744, 0.6796, 0.6221]])\n","\n","Node 13 final weights:\n","tensor([[0.6478, 0.6870, 0.6740],\n","        [0.6059, 0.6843, 0.5935],\n","        [0.6798, 0.6156, 0.6656]])\n","\n","Node 14 final weights:\n","tensor([[0.6533, 0.6455, 0.6334],\n","        [0.5680, 0.7019, 0.6652],\n","        [0.5854, 0.6081, 0.6853]])\n","\n","Node 15 final weights:\n","tensor([[0.6556, 0.6410, 0.6213],\n","        [0.5292, 0.6503, 0.6120],\n","        [0.6646, 0.5943, 0.6790]])\n","\n","Node 16 final weights:\n","tensor([[0.6909, 0.6701, 0.6783],\n","        [0.5328, 0.7110, 0.5686],\n","        [0.5945, 0.6291, 0.6757]])\n","\n","Node 17 final weights:\n","tensor([[0.6894, 0.7049, 0.6197],\n","        [0.5738, 0.6609, 0.6546],\n","        [0.6082, 0.6150, 0.6635]])\n","\n","Node 18 final weights:\n","tensor([[0.7184, 0.6091, 0.6092],\n","        [0.6176, 0.6817, 0.6298],\n","        [0.6200, 0.6098, 0.6345]])\n","\n","Node 19 final weights:\n","tensor([[0.6604, 0.6853, 0.6905],\n","        [0.5323, 0.7095, 0.6402],\n","        [0.6363, 0.6611, 0.6299]])\n","\n","Node 20 final weights:\n","tensor([[0.7110, 0.6966, 0.6914],\n","        [0.5669, 0.6807, 0.5719],\n","        [0.6453, 0.6054, 0.6531]])\n","\n","Node 21 final weights:\n","tensor([[0.6731, 0.6988, 0.6330],\n","        [0.5775, 0.6393, 0.6660],\n","        [0.5874, 0.6617, 0.6543]])\n","\n","Node 22 final weights:\n","tensor([[0.6556, 0.6456, 0.6516],\n","        [0.5197, 0.6501, 0.6268],\n","        [0.6273, 0.6786, 0.6002]])\n","\n","Node 23 final weights:\n","tensor([[0.7267, 0.6327, 0.6179],\n","        [0.5834, 0.6732, 0.6147],\n","        [0.6443, 0.6090, 0.6613]])\n","\n","Node 24 final weights:\n","tensor([[0.7138, 0.6062, 0.6859],\n","        [0.5235, 0.6453, 0.6163],\n","        [0.6373, 0.6782, 0.6623]])\n","\n","Node 25 final weights:\n","tensor([[0.7362, 0.6598, 0.6196],\n","        [0.5341, 0.6684, 0.6189],\n","        [0.6056, 0.6497, 0.6895]])\n","\n","Node 26 final weights:\n","tensor([[0.6830, 0.6209, 0.6903],\n","        [0.5883, 0.7141, 0.6498],\n","        [0.6297, 0.6230, 0.6882]])\n","\n","Node 27 final weights:\n","tensor([[0.6629, 0.6959, 0.6192],\n","        [0.5870, 0.6301, 0.6153],\n","        [0.6497, 0.6108, 0.6009]])\n","\n","Node 28 final weights:\n","tensor([[0.7282, 0.6749, 0.6538],\n","        [0.5741, 0.6525, 0.6104],\n","        [0.6373, 0.6889, 0.6904]])\n","\n","Node 29 final weights:\n","tensor([[0.7001, 0.6357, 0.6698],\n","        [0.5886, 0.6927, 0.6323],\n","        [0.6232, 0.6119, 0.6321]])\n","\n","Node 30 final weights:\n","tensor([[0.6396, 0.6306, 0.6953],\n","        [0.6002, 0.6173, 0.5783],\n","        [0.6217, 0.6695, 0.6675]])\n","\n","Node 31 final weights:\n","tensor([[0.7355, 0.6614, 0.6293],\n","        [0.6057, 0.7004, 0.6100],\n","        [0.6064, 0.5931, 0.6876]])\n","\n","Node 32 final weights:\n","tensor([[0.6997, 0.6698, 0.6038],\n","        [0.5398, 0.6796, 0.6366],\n","        [0.6818, 0.6142, 0.6360]])\n","\n","Node 33 final weights:\n","tensor([[0.7238, 0.6359, 0.6110],\n","        [0.5866, 0.6936, 0.6218],\n","        [0.6512, 0.6755, 0.6449]])\n","\n","Node 34 final weights:\n","tensor([[0.6722, 0.6793, 0.6679],\n","        [0.5469, 0.6321, 0.6135],\n","        [0.6449, 0.6446, 0.6104]])\n","\n","Node 35 final weights:\n","tensor([[0.7044, 0.6868, 0.6551],\n","        [0.5366, 0.6957, 0.6005],\n","        [0.5857, 0.6807, 0.6684]])\n","\n","Node 36 final weights:\n","tensor([[0.6522, 0.6170, 0.6689],\n","        [0.6179, 0.7001, 0.6215],\n","        [0.6433, 0.6783, 0.6752]])\n","\n","Node 37 final weights:\n","tensor([[0.6566, 0.6052, 0.6393],\n","        [0.5579, 0.6764, 0.6255],\n","        [0.5963, 0.5997, 0.6169]])\n","\n","Node 38 final weights:\n","tensor([[0.6876, 0.6852, 0.6115],\n","        [0.5571, 0.6252, 0.6133],\n","        [0.6341, 0.6711, 0.6063]])\n","\n","Node 39 final weights:\n","tensor([[0.6465, 0.6448, 0.6883],\n","        [0.5333, 0.6520, 0.6421],\n","        [0.6017, 0.6538, 0.6066]])\n","\n","Node 40 final weights:\n","tensor([[0.6968, 0.6636, 0.5995],\n","        [0.5887, 0.6375, 0.6139],\n","        [0.6756, 0.6653, 0.6094]])\n","\n","Node 41 final weights:\n","tensor([[0.6709, 0.6717, 0.6393],\n","        [0.5244, 0.6719, 0.5946],\n","        [0.5999, 0.6459, 0.6815]])\n","\n","Node 42 final weights:\n","tensor([[0.6657, 0.6711, 0.6544],\n","        [0.5618, 0.6371, 0.6289],\n","        [0.6192, 0.6841, 0.6845]])\n","\n","Node 43 final weights:\n","tensor([[0.7154, 0.6788, 0.6238],\n","        [0.5972, 0.6893, 0.5925],\n","        [0.6304, 0.6204, 0.6960]])\n","\n","Node 44 final weights:\n","tensor([[0.6774, 0.6676, 0.6127],\n","        [0.5869, 0.6495, 0.5795],\n","        [0.5992, 0.5917, 0.6160]])\n","\n","Node 45 final weights:\n","tensor([[0.7006, 0.6809, 0.5998],\n","        [0.5492, 0.6344, 0.6449],\n","        [0.6185, 0.6835, 0.6636]])\n","\n","Node 46 final weights:\n","tensor([[0.7308, 0.6331, 0.6008],\n","        [0.5388, 0.7048, 0.5890],\n","        [0.6816, 0.6290, 0.6739]])\n","\n","Node 47 final weights:\n","tensor([[0.6588, 0.6318, 0.6389],\n","        [0.5956, 0.6383, 0.6129],\n","        [0.6528, 0.6108, 0.6089]])\n","\n","Node 48 final weights:\n","tensor([[0.6449, 0.6516, 0.6000],\n","        [0.5366, 0.7134, 0.5943],\n","        [0.5874, 0.6588, 0.6304]])\n","\n","Node 49 final weights:\n","tensor([[0.6858, 0.6481, 0.6129],\n","        [0.5777, 0.6806, 0.6369],\n","        [0.5860, 0.6469, 0.6225]])\n","\n","Node 50 final weights:\n","tensor([[0.6746, 0.6942, 0.6710],\n","        [0.5960, 0.6841, 0.5894],\n","        [0.6450, 0.6460, 0.6119]])\n","\n","Node 51 final weights:\n","tensor([[0.6976, 0.6902, 0.6988],\n","        [0.5626, 0.7027, 0.5804],\n","        [0.6452, 0.6377, 0.6092]])\n","\n","Node 52 final weights:\n","tensor([[0.6687, 0.6632, 0.6211],\n","        [0.5622, 0.6605, 0.6265],\n","        [0.6754, 0.6805, 0.6054]])\n","\n","Node 53 final weights:\n","tensor([[0.7157, 0.6604, 0.6980],\n","        [0.6062, 0.6550, 0.6088],\n","        [0.6143, 0.6794, 0.6745]])\n","\n","Node 54 final weights:\n","tensor([[0.7143, 0.6933, 0.6782],\n","        [0.5369, 0.6479, 0.6188],\n","        [0.6296, 0.6857, 0.6356]])\n","\n","Node 55 final weights:\n","tensor([[0.6495, 0.6904, 0.6084],\n","        [0.5771, 0.6190, 0.6429],\n","        [0.6721, 0.5955, 0.6072]])\n","\n","Node 56 final weights:\n","tensor([[0.6658, 0.6696, 0.6756],\n","        [0.6174, 0.7086, 0.5688],\n","        [0.5921, 0.6345, 0.6325]])\n","\n","Node 57 final weights:\n","tensor([[0.7329, 0.6550, 0.6033],\n","        [0.5617, 0.7067, 0.5906],\n","        [0.5941, 0.5946, 0.6553]])\n","\n","Node 58 final weights:\n","tensor([[0.6414, 0.6778, 0.6476],\n","        [0.5246, 0.6692, 0.5906],\n","        [0.5981, 0.6539, 0.5983]])\n","\n","Node 59 final weights:\n","tensor([[0.7216, 0.6583, 0.6897],\n","        [0.5497, 0.6605, 0.6475],\n","        [0.6074, 0.6677, 0.6614]])\n","\n","Node 60 final weights:\n","tensor([[0.7226, 0.6926, 0.6235],\n","        [0.5581, 0.6935, 0.6189],\n","        [0.6727, 0.6445, 0.6923]])\n","\n","Node 61 final weights:\n","tensor([[0.7302, 0.6649, 0.6937],\n","        [0.5224, 0.6300, 0.5890],\n","        [0.5854, 0.6176, 0.6953]])\n","\n","Node 62 final weights:\n","tensor([[0.7082, 0.6089, 0.6196],\n","        [0.5592, 0.6648, 0.6591],\n","        [0.6534, 0.6552, 0.6149]])\n","\n","Node 63 final weights:\n","tensor([[0.6877, 0.7036, 0.6731],\n","        [0.5629, 0.6620, 0.6163],\n","        [0.6615, 0.6696, 0.6416]])\n","\n","Node 64 final weights:\n","tensor([[0.6901, 0.6656, 0.6483],\n","        [0.5257, 0.6777, 0.5979],\n","        [0.6750, 0.5925, 0.6582]])\n","\n","Node 65 final weights:\n","tensor([[0.6513, 0.6989, 0.6398],\n","        [0.5354, 0.6767, 0.5903],\n","        [0.6243, 0.6243, 0.6045]])\n","\n","Node 66 final weights:\n","tensor([[0.6469, 0.6616, 0.6564],\n","        [0.6136, 0.6486, 0.6594],\n","        [0.6167, 0.6506, 0.6446]])\n","\n","Node 67 final weights:\n","tensor([[0.7318, 0.6861, 0.6930],\n","        [0.6010, 0.7123, 0.6523],\n","        [0.6729, 0.6093, 0.6676]])\n","\n","Node 68 final weights:\n","tensor([[0.7303, 0.6923, 0.6372],\n","        [0.5422, 0.6328, 0.6186],\n","        [0.6646, 0.6657, 0.6612]])\n","\n","Node 69 final weights:\n","tensor([[0.6526, 0.6599, 0.6648],\n","        [0.5583, 0.7123, 0.6340],\n","        [0.6774, 0.6575, 0.6745]])\n","\n","Node 70 final weights:\n","tensor([[0.6657, 0.6394, 0.6051],\n","        [0.5630, 0.6720, 0.6473],\n","        [0.6022, 0.6736, 0.6413]])\n","\n","Node 71 final weights:\n","tensor([[0.6648, 0.6571, 0.6438],\n","        [0.5349, 0.7088, 0.6287],\n","        [0.6116, 0.6009, 0.6290]])\n","\n","Node 72 final weights:\n","tensor([[0.6816, 0.6884, 0.6823],\n","        [0.5450, 0.6403, 0.6399],\n","        [0.6673, 0.6435, 0.6349]])\n","\n","Node 73 final weights:\n","tensor([[0.7368, 0.6540, 0.6015],\n","        [0.5322, 0.6486, 0.6494],\n","        [0.6704, 0.6257, 0.6297]])\n","\n","Node 74 final weights:\n","tensor([[0.6463, 0.6739, 0.6893],\n","        [0.5577, 0.6875, 0.6347],\n","        [0.5911, 0.6129, 0.6052]])\n","\n","Node 75 final weights:\n","tensor([[0.6883, 0.6240, 0.6107],\n","        [0.5331, 0.6963, 0.5750],\n","        [0.6039, 0.6308, 0.6281]])\n","\n","Node 76 final weights:\n","tensor([[0.6735, 0.6506, 0.6863],\n","        [0.5359, 0.6683, 0.5723],\n","        [0.6447, 0.6548, 0.6282]])\n","\n","Node 77 final weights:\n","tensor([[0.7348, 0.6609, 0.6276],\n","        [0.5772, 0.6904, 0.5900],\n","        [0.5940, 0.6694, 0.6671]])\n","\n","Node 78 final weights:\n","tensor([[0.6742, 0.6349, 0.6584],\n","        [0.5816, 0.6638, 0.6493],\n","        [0.6316, 0.6094, 0.6880]])\n","\n","Node 79 final weights:\n","tensor([[0.6897, 0.7016, 0.6929],\n","        [0.5826, 0.6690, 0.5998],\n","        [0.6381, 0.5924, 0.6607]])\n","\n","Node 80 final weights:\n","tensor([[0.7029, 0.6405, 0.6632],\n","        [0.5446, 0.6608, 0.6254],\n","        [0.6544, 0.6804, 0.6085]])\n","\n","Node 81 final weights:\n","tensor([[0.6674, 0.6932, 0.6674],\n","        [0.5634, 0.7016, 0.6456],\n","        [0.6212, 0.6749, 0.6690]])\n","\n","Node 82 final weights:\n","tensor([[0.6682, 0.6359, 0.6735],\n","        [0.5406, 0.6774, 0.6274],\n","        [0.6406, 0.6102, 0.6935]])\n","\n","Node 83 final weights:\n","tensor([[0.7173, 0.6518, 0.6924],\n","        [0.5197, 0.6400, 0.6274],\n","        [0.6251, 0.6121, 0.6312]])\n","\n","Node 84 final weights:\n","tensor([[0.7222, 0.6683, 0.6735],\n","        [0.5863, 0.6636, 0.6467],\n","        [0.6484, 0.6441, 0.6893]])\n","\n","Node 85 final weights:\n","tensor([[0.6949, 0.6224, 0.6720],\n","        [0.5945, 0.6430, 0.6156],\n","        [0.5914, 0.6407, 0.6209]])\n","\n","Node 86 final weights:\n","tensor([[0.7230, 0.6752, 0.6829],\n","        [0.5822, 0.6255, 0.6530],\n","        [0.6520, 0.6746, 0.6620]])\n","\n","Node 87 final weights:\n","tensor([[0.7252, 0.6885, 0.6237],\n","        [0.5786, 0.7044, 0.5882],\n","        [0.6034, 0.6323, 0.6309]])\n","\n","Node 88 final weights:\n","tensor([[0.7157, 0.6142, 0.6624],\n","        [0.5438, 0.6517, 0.6211],\n","        [0.6118, 0.6294, 0.6434]])\n","\n","Node 89 final weights:\n","tensor([[0.6717, 0.6331, 0.6594],\n","        [0.5238, 0.6492, 0.6632],\n","        [0.6249, 0.6067, 0.6744]])\n","\n","Node 90 final weights:\n","tensor([[0.7277, 0.6378, 0.6448],\n","        [0.5681, 0.7035, 0.5892],\n","        [0.6740, 0.6474, 0.6779]])\n","\n","Node 91 final weights:\n","tensor([[0.7075, 0.7004, 0.6783],\n","        [0.6065, 0.6599, 0.6547],\n","        [0.6192, 0.6767, 0.6464]])\n","\n","Node 92 final weights:\n","tensor([[0.7202, 0.6695, 0.6197],\n","        [0.6065, 0.6173, 0.5792],\n","        [0.6544, 0.6298, 0.6958]])\n","\n","Node 93 final weights:\n","tensor([[0.6691, 0.6185, 0.6173],\n","        [0.5385, 0.6219, 0.5724],\n","        [0.5839, 0.6439, 0.6085]])\n","\n","Node 94 final weights:\n","tensor([[0.6956, 0.6833, 0.6407],\n","        [0.5722, 0.6445, 0.5696],\n","        [0.6408, 0.5911, 0.6271]])\n","\n","Node 95 final weights:\n","tensor([[0.7344, 0.6089, 0.6188],\n","        [0.5561, 0.6707, 0.6635],\n","        [0.6289, 0.6633, 0.6252]])\n","\n","Node 96 final weights:\n","tensor([[0.6455, 0.6444, 0.6508],\n","        [0.5453, 0.7092, 0.5861],\n","        [0.5981, 0.6207, 0.6240]])\n","\n","Node 97 final weights:\n","tensor([[0.7203, 0.6377, 0.6566],\n","        [0.6021, 0.6406, 0.6578],\n","        [0.6451, 0.6492, 0.6614]])\n","\n","Node 98 final weights:\n","tensor([[0.6743, 0.6630, 0.6064],\n","        [0.6100, 0.6955, 0.6038],\n","        [0.6482, 0.6863, 0.6548]])\n","\n","Node 99 final weights:\n","tensor([[0.6791, 0.6994, 0.6065],\n","        [0.5447, 0.6905, 0.6107],\n","        [0.5958, 0.6105, 0.6686]])\n","\n","Node 100 final weights:\n","tensor([[0.6827, 0.6312, 0.6658],\n","        [0.6149, 0.6489, 0.6077],\n","        [0.6079, 0.6610, 0.6006]])\n","\n"]}]},{"cell_type":"markdown","source":["# **convergence_differences: Tracks the average difference of all nodes from the global matrix for each iteration.**\n","# **differences: Computes the individual differences between each node's weights and the global matrix.**"],"metadata":{"id":"0NsD8SrbklIq"}},{"cell_type":"code","source":["# Initialize a list to store average differences for each iteration\n","convergence_differences = []\n","\n","# Iterative process with tracking of differences\n","for iteration in range(1, iterations + 1):\n","    print(f\"--- Iteration {iteration} ---\")\n","\n","    # Step 1: Nodes send weights to the global model\n","    encrypted_weights = [encrypt(weight) for weight in node_weights]\n","\n","    # Step 2: Global model computes the average matrix\n","    decrypted_weights = [decrypt(weight) for weight in encrypted_weights]\n","    global_matrix = sum(decrypted_weights) / N\n","\n","    # Step 3: Global model sends the average matrix back to the nodes\n","    encrypted_global_matrix = encrypt(global_matrix)\n","    received_matrices = [decrypt(encrypted_global_matrix) for _ in range(N)]\n","\n","    # Step 4: Nodes update their weights using the received global matrix\n","    node_weights = [update_weights(matrix) for matrix in received_matrices]\n","\n","    # Compute and log differences\n","    differences = [torch.norm(weight - global_matrix).item() for weight in node_weights]\n","    avg_difference = sum(differences) / N\n","    convergence_differences.append(avg_difference)\n","\n","    # Logging\n","    print(f\"Average Difference at Iteration {iteration}: {avg_difference}\")\n","\n","# Plot the differences over iterations\n","import matplotlib.pyplot as plt\n","\n","plt.plot(range(1, iterations + 1), convergence_differences)\n","plt.xlabel('Iteration')\n","plt.ylabel('Average Difference from Global Matrix')\n","plt.title('Convergence of Node Weights to Global Matrix')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":576},"id":"6i8oyZ50kJLM","executionInfo":{"status":"ok","timestamp":1732035347437,"user_tz":-120,"elapsed":728,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"84863118-5f7e-47fc-9481-1520724d80c7"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["--- Iteration 1 ---\n","Average Difference at Iteration 1: 0.17157205633819103\n","--- Iteration 2 ---\n","Average Difference at Iteration 2: 0.17101160667836665\n","--- Iteration 3 ---\n","Average Difference at Iteration 3: 0.17377106383442878\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**Python Code for 100 Nodes**\n"],"metadata":{"id":"3ZQ9l8CpYXtl"}},{"cell_type":"code","source":["import torch\n","import random\n","from sympy import mod_inverse\n","\n","# Parameters\n","NUM_NODES = 100\n","MATRIX_SIZE = (3, 3)  # Example weight matrix size\n","THRESHOLD = 3         # Minimum number of shares to reconstruct\n","PRIME = 104729        # Large prime for Shamir's Secret Sharing\n","ITERATIONS = 3        # Number of training rounds\n","\n","# Initialize random weights for each node\n","node_weights = [torch.rand(MATRIX_SIZE) for _ in range(NUM_NODES)]\n","\n","# Shamir's Secret Sharing\n","def shamir_split(secret, n, k, prime=104729):\n","    coeffs = [secret] + [random.randint(0, prime - 1) for _ in range(k - 1)]\n","    shares = [(i, sum(c * (i ** j) for j, c in enumerate(coeffs)) % prime) for i in range(1, n + 1)]\n","    return shares\n","\n","def shamir_reconstruct(shares, prime=104729):\n","    secret = 0\n","    for j, (xj, yj) in enumerate(shares):\n","        num, den = 1, 1\n","        for m, (xm, _) in enumerate(shares):\n","            if m != j:\n","                num = (num * (-xm)) % prime\n","                den = (den * (xj - xm)) % prime\n","        lagrange_coeff = num * mod_inverse(den, prime)\n","        secret = (prime + secret + yj * lagrange_coeff) % prime\n","    return secret\n","\n","# Encrypt weights using Shamir's Secret Sharing\n","shares_list = []\n","for weight in node_weights:\n","    secret = int(weight.sum().item() * 1e6)  # Convert to integer for sharing\n","    shares = shamir_split(secret, NUM_NODES, THRESHOLD, PRIME)\n","    shares_list.append(shares)\n","\n","# Simulated Blockchain\n","blockchain = []\n","for shares in shares_list:\n","    blockchain.append(shares)  # Store encrypted shares\n"],"metadata":{"id":"Je_JvZuOYcRC","executionInfo":{"status":"ok","timestamp":1732036316624,"user_tz":-120,"elapsed":265,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# Homomorphic Encryption (Mock for Demonstration)\n","def homomorphic_encrypt(value):\n","    return value + 1  # Mock encryption (add noise)\n","\n","def homomorphic_decrypt(value):\n","    return value - 1  # Mock decryption (remove noise)\n","\n","# Encrypt shares and store on blockchain\n","encrypted_shares_list = []\n","for shares in blockchain:\n","    encrypted_shares = [(x, homomorphic_encrypt(y)) for x, y in shares]\n","    encrypted_shares_list.append(encrypted_shares)\n","\n","# Aggregate encrypted shares\n","aggregated_encrypted_share = [sum(share[1] for share in encrypted_shares) for encrypted_shares in zip(*encrypted_shares_list)]\n","\n","# Decrypt aggregated result\n","aggregated_share = [homomorphic_decrypt(value) for value in aggregated_encrypted_share]\n","aggregated_secret = shamir_reconstruct([(i + 1, value) for i, value in enumerate(aggregated_share)], PRIME)\n","\n","\n","# Updated with real encryption and Blockchain recording."],"metadata":{"id":"FYMnslOEYig9","executionInfo":{"status":"ok","timestamp":1732036327520,"user_tz":-120,"elapsed":305,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["# Aggregate encrypted shares for each element in the matrix\n","# Ensure each matrix element is aggregated separately\n","aggregated_encrypted_weights = []\n","for i in range(MATRIX_SIZE[0] * MATRIX_SIZE[1]):  # Flatten the matrix\n","    element_sum = sum(transaction[\"data\"][i] for transaction in blockchain)  # Sum encrypted values for this element\n","    aggregated_encrypted_weights.append(element_sum)\n","\n","# Decrypt the aggregated matrix\n","decrypted_matrix_elements = [decrypt_weight(value) for value in aggregated_encrypted_weights]\n","\n","# Convert the flattened list back into a tensor with the specified shape\n","global_model_weights = torch.tensor(decrypted_matrix_elements).view(MATRIX_SIZE)\n","\n","# Redistribute the global model to all nodes\n","node_weights = [global_model_weights.clone() for _ in range(NUM_NODES)]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"IS5nIvdmaddJ","executionInfo":{"status":"error","timestamp":1732036389182,"user_tz":-120,"elapsed":300,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"71b31dc0-775a-4dcf-b829-ce3b16d3ad26"},"execution_count":14,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"list indices must be integers or slices, not str","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-bbededafffc2>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0maggregated_encrypted_weights\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMATRIX_SIZE\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mMATRIX_SIZE\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Flatten the matrix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m     \u001b[0melement_sum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtransaction\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"data\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mtransaction\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mblockchain\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Sum encrypted values for this element\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m     \u001b[0maggregated_encrypted_weights\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0melement_sum\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-14-bbededafffc2>\u001b[0m in \u001b[0;36m<genexpr>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0maggregated_encrypted_weights\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMATRIX_SIZE\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mMATRIX_SIZE\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Flatten the matrix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m     \u001b[0melement_sum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtransaction\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"data\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mtransaction\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mblockchain\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Sum encrypted values for this element\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m     \u001b[0maggregated_encrypted_weights\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0melement_sum\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: list indices must be integers or slices, not str"]}]},{"cell_type":"code","source":["# Convert aggregated result back to a tensor\n","global_model_weights = torch.tensor(aggregated_secret / 1e6).view(MATRIX_SIZE)\n","\n","# Redistribute updated global model to nodes\n","node_weights = [global_model_weights.clone() for _ in range(NUM_NODES)]\n","\n","print(\"Updated Global Model Weights:\")\n","print(global_model_weights)\n","\n","print(\"\\nRedistributed Weights to Nodes:\")\n","for i in range(5):  # Print only the first 5 for brevity\n","    print(f\"Node {i + 1} weights:\\n{node_weights[i]}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":211},"id":"Mo3T1LqeYksd","executionInfo":{"status":"error","timestamp":1732036337349,"user_tz":-120,"elapsed":276,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"e0fa97bf-b04a-4cf7-c779-3b309f48cb8a"},"execution_count":13,"outputs":[{"output_type":"error","ename":"RuntimeError","evalue":"shape '[3, 3]' is invalid for input of size 1","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-7a87d0705593>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Convert aggregated result back to a tensor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mglobal_model_weights\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maggregated_secret\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m1e6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMATRIX_SIZE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Redistribute updated global model to nodes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mnode_weights\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mglobal_model_weights\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mNUM_NODES\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: shape '[3, 3]' is invalid for input of size 1"]}]},{"cell_type":"code","source":["!pip install web3\n","!pip install pycryptodome\n","!pip install phe\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2S46QsvAYyjd","executionInfo":{"status":"ok","timestamp":1732036001011,"user_tz":-120,"elapsed":17290,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"0d4a414e-214f-4a31-8767-e07db454a355"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: web3 in /usr/local/lib/python3.10/dist-packages (7.5.0)\n","Requirement already satisfied: eth-abi>=5.0.1 in /usr/local/lib/python3.10/dist-packages (from web3) (5.1.0)\n","Requirement already satisfied: eth-account>=0.13.1 in /usr/local/lib/python3.10/dist-packages (from web3) (0.13.4)\n","Requirement already satisfied: eth-hash>=0.5.1 in /usr/local/lib/python3.10/dist-packages (from eth-hash[pycryptodome]>=0.5.1->web3) (0.7.0)\n","Requirement already satisfied: eth-typing>=5.0.0 in /usr/local/lib/python3.10/dist-packages (from web3) (5.0.1)\n","Requirement already satisfied: eth-utils>=5.0.0 in /usr/local/lib/python3.10/dist-packages (from web3) (5.1.0)\n","Requirement already satisfied: hexbytes>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from web3) (1.2.1)\n","Requirement already satisfied: aiohttp>=3.7.4.post0 in /usr/local/lib/python3.10/dist-packages (from web3) (3.11.1)\n","Requirement already satisfied: pydantic>=2.4.0 in /usr/local/lib/python3.10/dist-packages (from web3) (2.9.2)\n","Requirement already satisfied: requests>=2.23.0 in /usr/local/lib/python3.10/dist-packages (from web3) (2.32.3)\n","Requirement already satisfied: typing-extensions>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from web3) (4.12.2)\n","Requirement already satisfied: types-requests>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from web3) (2.32.0.20241016)\n","Requirement already satisfied: websockets>=10.0.0 in /usr/local/lib/python3.10/dist-packages (from web3) (14.1)\n","Requirement already satisfied: pyunormalize>=15.0.0 in /usr/local/lib/python3.10/dist-packages (from web3) (16.0.0)\n","Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp>=3.7.4.post0->web3) (2.4.3)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp>=3.7.4.post0->web3) (1.3.1)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp>=3.7.4.post0->web3) (24.2.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp>=3.7.4.post0->web3) (1.5.0)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp>=3.7.4.post0->web3) (6.1.0)\n","Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp>=3.7.4.post0->web3) (0.2.0)\n","Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp>=3.7.4.post0->web3) (1.17.1)\n","Requirement already satisfied: async-timeout<6.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp>=3.7.4.post0->web3) (4.0.3)\n","Requirement already satisfied: parsimonious<0.11.0,>=0.10.0 in /usr/local/lib/python3.10/dist-packages (from eth-abi>=5.0.1->web3) (0.10.0)\n","Requirement already satisfied: bitarray>=2.4.0 in /usr/local/lib/python3.10/dist-packages (from eth-account>=0.13.1->web3) (3.0.0)\n","Requirement already satisfied: eth-keyfile<0.9.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from eth-account>=0.13.1->web3) (0.8.1)\n","Requirement already satisfied: eth-keys>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from eth-account>=0.13.1->web3) (0.6.0)\n","Requirement already satisfied: eth-rlp>=2.1.0 in /usr/local/lib/python3.10/dist-packages (from eth-account>=0.13.1->web3) (2.1.0)\n","Requirement already satisfied: rlp>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from eth-account>=0.13.1->web3) (4.0.1)\n","Requirement already satisfied: ckzg>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from eth-account>=0.13.1->web3) (2.0.1)\n","Requirement already satisfied: pycryptodome<4,>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from eth-hash[pycryptodome]>=0.5.1->web3) (3.21.0)\n","Requirement already satisfied: cytoolz>=0.10.1 in /usr/local/lib/python3.10/dist-packages (from eth-utils>=5.0.0->web3) (1.0.0)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.4.0->web3) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.23.4 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.4.0->web3) (2.23.4)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.23.0->web3) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.23.0->web3) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.23.0->web3) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.23.0->web3) (2024.8.30)\n","Requirement already satisfied: toolz>=0.8.0 in /usr/local/lib/python3.10/dist-packages (from cytoolz>=0.10.1->eth-utils>=5.0.0->web3) (0.12.1)\n","Requirement already satisfied: regex>=2022.3.15 in /usr/local/lib/python3.10/dist-packages (from parsimonious<0.11.0,>=0.10.0->eth-abi>=5.0.1->web3) (2024.9.11)\n","Requirement already satisfied: pycryptodome in /usr/local/lib/python3.10/dist-packages (3.21.0)\n","Collecting phe\n","  Downloading phe-1.5.0-py2.py3-none-any.whl.metadata (3.8 kB)\n","Downloading phe-1.5.0-py2.py3-none-any.whl (53 kB)\n","\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m53.7/53.7 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: phe\n","Successfully installed phe-1.5.0\n"]}]},{"cell_type":"markdown","source":["Step 1: Local Model Training on Nodes\n"],"metadata":{"id":"23MvwQEncc5g"}},{"cell_type":"code","source":["import torch\n","\n","# Number of nodes and model matrix size\n","NUM_NODES = 100\n","MATRIX_SIZE = (3, 3)  # Example weight matrix size\n","\n","# Initialize random weight matrices for each node\n","node_weights = [torch.rand(MATRIX_SIZE) for _ in range(NUM_NODES)]\n","\n","print(f\"Initial weights for {NUM_NODES} nodes have been generated.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cVq-EcnmbGVH","executionInfo":{"status":"ok","timestamp":1732036554950,"user_tz":-120,"elapsed":273,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"10ea005d-5da9-473b-e712-7c1b5e87c26c"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Initial weights for 100 nodes have been generated.\n"]}]},{"cell_type":"markdown","source":["Step 2: Hybrid Encryption ‚Äì MPC with Shamir's Secret Sharing\n"],"metadata":{"id":"VMrs4JhqcfJ_"}},{"cell_type":"code","source":["import random\n","from sympy import mod_inverse\n","from phe import paillier  # For homomorphic encryption\n","\n","# Shamir's Secret Sharing\n","def shamir_split(secret, n, k, prime=104729):\n","    \"\"\"Split the secret into n shares with a threshold of k.\"\"\"\n","    coeffs = [secret] + [random.randint(0, prime - 1) for _ in range(k - 1)]\n","    shares = [(i, sum(c * (i ** j) for j, c in enumerate(coeffs)) % prime) for i in range(1, n + 1)]\n","    return shares\n","\n","# Generate Paillier keys for homomorphic encryption\n","public_key, private_key = paillier.generate_paillier_keypair()\n","\n","# Split and encrypt weights\n","encrypted_shares = []\n","for weight in node_weights:\n","    shares = [shamir_split(int(weight.sum().item() * 1e6), NUM_NODES, 3) for weight in weight.view(-1)]\n","    encrypted = [[(x, public_key.encrypt(y)) for x, y in share] for share in shares]\n","    encrypted_shares.append(encrypted)\n","\n","print(\"MPC with Shamir's Secret Sharing and homomorphic encryption is complete.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":356},"id":"Eh4VpfAybJ58","executionInfo":{"status":"error","timestamp":1732039063007,"user_tz":-120,"elapsed":52691,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"c9a06f79-2bc3-467c-b9eb-221a534bfcb8"},"execution_count":16,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-463343f3f86e>\u001b[0m in \u001b[0;36m<cell line: 17>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mweight\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnode_weights\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mshares\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mshamir_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m1e6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mNUM_NODES\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mweight\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mweight\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m     \u001b[0mencrypted\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpublic_key\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencrypt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mshare\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mshare\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mshares\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m     \u001b[0mencrypted_shares\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mencrypted\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-16-463343f3f86e>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mweight\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnode_weights\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mshares\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mshamir_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m1e6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mNUM_NODES\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mweight\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mweight\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m     \u001b[0mencrypted\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpublic_key\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencrypt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mshare\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mshare\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mshares\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m     \u001b[0mencrypted_shares\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mencrypted\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-16-463343f3f86e>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mweight\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnode_weights\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mshares\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mshamir_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m1e6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mNUM_NODES\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mweight\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mweight\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m     \u001b[0mencrypted\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpublic_key\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencrypt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mshare\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mshare\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mshares\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m     \u001b[0mencrypted_shares\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mencrypted\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/phe/paillier.py\u001b[0m in \u001b[0;36mencrypt\u001b[0;34m(self, value, precision, r_value)\u001b[0m\n\u001b[1;32m    173\u001b[0m             \u001b[0mencoding\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mEncodedNumber\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprecision\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    174\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 175\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencrypt_encoded\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mencoding\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mr_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    176\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    177\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mencrypt_encoded\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mr_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/phe/paillier.py\u001b[0m in \u001b[0;36mencrypt_encoded\u001b[0;34m(self, encoding, r_value)\u001b[0m\n\u001b[1;32m    191\u001b[0m         \u001b[0mencrypted_number\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mEncryptedNumber\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mciphertext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexponent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    192\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mr_value\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 193\u001b[0;31m             \u001b[0mencrypted_number\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobfuscate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    194\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mencrypted_number\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    195\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/phe/paillier.py\u001b[0m in \u001b[0;36mobfuscate\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    620\u001b[0m         \"\"\"\n\u001b[1;32m    621\u001b[0m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpublic_key\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_random_lt_n\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 622\u001b[0;31m         \u001b[0mr_pow_n\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpowmod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpublic_key\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpublic_key\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnsquare\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    623\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__ciphertext\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmulmod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__ciphertext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mr_pow_n\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpublic_key\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnsquare\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    624\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__is_obfuscated\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/phe/util.py\u001b[0m in \u001b[0;36mpowmod\u001b[0;34m(a, b, c)\u001b[0m\n\u001b[1;32m     46\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mHAVE_GMP\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0m_USE_MOD_FROM_GMP_SIZE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 48\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mpow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     49\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgmpy2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpowmod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","source":["Step 3: Blockchain for Secure Key and Share Management\n"],"metadata":{"id":"hpXn49Bschgr"}},{"cell_type":"code","source":["# Simulate a blockchain for encrypted shares\n","blockchain = []\n","\n","# Record encrypted shares on the blockchain\n","for node_id, shares in enumerate(encrypted_shares):\n","    blockchain.append({\"node_id\": node_id, \"shares\": shares})\n","\n","print(\"Encrypted shares have been recorded on the blockchain.\")\n"],"metadata":{"id":"S4XZR2X5bO9c"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Step 4: Secure Aggregation Using Blockchain and Smart Contracts\n"],"metadata":{"id":"GI71gWCOcjs8"}},{"cell_type":"code","source":["# Secure Aggregation\n","aggregated_encrypted_weights = []\n","for i in range(MATRIX_SIZE[0] * MATRIX_SIZE[1]):  # Flattened matrix\n","    element_sum = sum(share[\"shares\"][i][1] for share in blockchain)  # Sum encrypted values\n","    aggregated_encrypted_weights.append(element_sum)\n","\n","# Decrypt aggregated weights\n","aggregated_weights = [private_key.decrypt(value) / 1e6 for value in aggregated_encrypted_weights]\n","global_model_weights = torch.tensor(aggregated_weights).view(MATRIX_SIZE)\n","\n","print(\"Global model weights after secure aggregation and decryption:\")\n","print(global_model_weights)\n"],"metadata":{"id":"IyjBMk0ObV5q"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Step 5: Update Global Model and Redistribute to Nodes\n"],"metadata":{"id":"wv1FlrMyclz-"}},{"cell_type":"code","source":["# Redistribute the updated global model to all nodes\n","node_weights = [global_model_weights.clone() for _ in range(NUM_NODES)]\n","\n","print(f\"Updated global model weights have been distributed to {NUM_NODES} nodes.\")\n"],"metadata":{"id":"COosDU8bbYHT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Step 6: Repeat for Multiple Rounds\n"],"metadata":{"id":"AKnCgdzXcoM-"}},{"cell_type":"code","source":["ITERATIONS = 3  # Number of training rounds\n","\n","for iteration in range(ITERATIONS):\n","    print(f\"--- Training Round {iteration + 1} ---\")\n","\n","    # Local updates (simulate local training)\n","    node_weights = [weight + 0.01 * torch.rand(MATRIX_SIZE) for weight in node_weights]\n","\n","    # Encrypt updated weights\n","    encrypted_shares = []\n","    for weight in node_weights:\n","        shares = [shamir_split(int(weight.sum().item() * 1e6), NUM_NODES, 3) for weight in weight.view(-1)]\n","        encrypted = [[(x, public_key.encrypt(y)) for x, y in share] for share in shares]\n","        encrypted_shares.append(encrypted)\n","\n","    # Record new encrypted shares on the blockchain\n","    blockchain = []\n","    for node_id, shares in enumerate(encrypted_shares):\n","        blockchain.append({\"node_id\": node_id, \"shares\": shares})\n","\n","    # Aggregate and decrypt\n","    aggregated_encrypted_weights = []\n","    for i in range(MATRIX_SIZE[0] * MATRIX_SIZE[1]):  # Flattened matrix\n","        element_sum = sum(share[\"shares\"][i][1] for share in blockchain)  # Sum encrypted values\n","        aggregated_encrypted_weights.append(element_sum)\n","\n","    aggregated_weights = [private_key.decrypt(value) / 1e6 for value in aggregated_encrypted_weights]\n","    global_model_weights = torch.tensor(aggregated_weights).view(MATRIX_SIZE)\n","\n","    # Redistribute global model\n","    node_weights = [global_model_weights.clone() for _ in range(NUM_NODES)]\n","\n","    print(f\"Round {iteration + 1} completed. Global model updated and redistributed.\")\n"],"metadata":{"id":"YAugZ_BWbcDl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **FINAL**"],"metadata":{"id":"neB--7WQcpQO"}},{"cell_type":"markdown","source":["Step 1: Local Model Training for 1000 Nodes\n"],"metadata":{"id":"35zs5J2ecsn3"}},{"cell_type":"code","source":["import torch\n","\n","# Step 1: Initialize weight matrices for 1000 nodes\n","NUM_NODES = 1000  # Total number of nodes\n","MATRIX_SIZE = (3, 3)  # Example weight matrix size\n","\n","# Randomly initialize weights for each node\n","node_weights = [torch.rand(MATRIX_SIZE) for _ in range(NUM_NODES)]\n","\n","print(f\"Initialized weight matrices for {NUM_NODES} nodes.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sAUtT3Qicypk","executionInfo":{"status":"ok","timestamp":1732039093209,"user_tz":-120,"elapsed":278,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"b7686aa5-edd9-4a81-a239-b992fdad50d0"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Initialized weight matrices for 1000 nodes.\n"]}]},{"cell_type":"markdown","source":["Step 2: MPC with Shamir's Secret Sharing\n"],"metadata":{"id":"KH1WkRSFc0ic"}},{"cell_type":"code","source":["import random\n","from sympy import mod_inverse\n","\n","# Shamir's Secret Sharing\n","def shamir_split(secret, n, k, prime=104729):\n","    \"\"\"Split a secret into n shares with a threshold of k.\"\"\"\n","    coeffs = [secret] + [random.randint(0, prime - 1) for _ in range(k - 1)]\n","    shares = [(i, sum(c * (i ** j) for j, c in enumerate(coeffs)) % prime) for i in range(1, n + 1)]\n","    return shares\n","\n","# Example: Splitting weight matrices into shares\n","prime = 104729  # Large prime for modular arithmetic\n","THRESHOLD = 3  # Minimum number of shares needed to reconstruct the secret\n","\n","# Convert weight matrices into integers and split\n","node_shares = []\n","for weights in node_weights:\n","    shares = [shamir_split(int(value.item() * 1e6), NUM_NODES, THRESHOLD, prime) for value in weights.view(-1)]\n","    node_shares.append(shares)\n","\n","print(\"MPC using Shamir's Secret Sharing completed.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QhjAUJZYc7F2","executionInfo":{"status":"ok","timestamp":1732039114287,"user_tz":-120,"elapsed":17958,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"6073894a-86a8-4a4f-f6ea-40ad05f4e918"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["MPC using Shamir's Secret Sharing completed.\n"]}]},{"cell_type":"markdown","source":["Step 3: Homomorphic Encryption\n","Encrypt the shares using Paillier Homomorphic Encryption to ensure computations (e.g., summing) can be performed directly on encrypted data without decryption."],"metadata":{"id":"Tck-mAs4c-9J"}},{"cell_type":"code","source":["from phe import paillier\n","\n","# Generate Paillier encryption keys\n","public_key, private_key = paillier.generate_paillier_keypair()\n","\n","# Encrypt shares\n","encrypted_shares = []\n","for shares in node_shares:\n","    encrypted = [[(x, public_key.encrypt(y)) for x, y in share] for share in shares]\n","    encrypted_shares.append(encrypted)\n","\n","print(\"Shares encrypted using Paillier Homomorphic Encryption.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":356},"id":"F99CXhemc_t7","executionInfo":{"status":"error","timestamp":1732046594820,"user_tz":-120,"elapsed":4508,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"3eaf79bf-cc18-4770-e6d8-f142b93708c9"},"execution_count":20,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-20ca08f026de>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Generate Paillier encryption keys\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mpublic_key\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprivate_key\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpaillier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgenerate_paillier_keypair\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# Encrypt shares\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/phe/paillier.py\u001b[0m in \u001b[0;36mgenerate_paillier_keypair\u001b[0;34m(private_keyring, n_length)\u001b[0m\n\u001b[1;32m     56\u001b[0m         \u001b[0mq\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0mq\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 58\u001b[0;31m             \u001b[0mq\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetprimeover\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_length\u001b[0m \u001b[0;34m//\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     59\u001b[0m         \u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mp\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mq\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m         \u001b[0mn_len\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbit_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/phe/util.py\u001b[0m in \u001b[0;36mgetprimeover\u001b[0;34m(N)\u001b[0m\n\u001b[1;32m    116\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgmpy2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnext_prime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mHAVE_CRYPTO\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 118\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnumber\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetPrime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0murandom\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    119\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m         \u001b[0mrandfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSystemRandom\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/Crypto/Util/number.py\u001b[0m in \u001b[0;36mgetPrime\u001b[0;34m(N, randfunc)\u001b[0m\n\u001b[1;32m    178\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    179\u001b[0m         \u001b[0mnumber\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetRandomNBitInteger\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandfunc\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 180\u001b[0;31m         \u001b[0;32mif\u001b[0m \u001b[0misPrime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumber\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandfunc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrandfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    181\u001b[0m             \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mnumber\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/Crypto/Util/number.py\u001b[0m in \u001b[0;36misPrime\u001b[0;34m(N, false_positive_prob, randfunc)\u001b[0m\n\u001b[1;32m    393\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mN\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    394\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 395\u001b[0;31m         \u001b[0;32mif\u001b[0m \u001b[0mN\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mp\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    396\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    397\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"I3W695uCDhyw"}},{"cell_type":"markdown","source":["Step 4: Blockchain Integration\n","Use real blockchain functionality to record encrypted shares and key references securely.\n","\n","Blockchain Setup\n","Deploy a smart contract (e.g., using Solidity) to handle encrypted shares.\n","Use web3.py to interact with the blockchain."],"metadata":{"id":"qOr7w08ddEVu"}},{"cell_type":"code","source":["!npm install -g truffle\n"],"metadata":{"id":"VvP-ohlaeR0Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install web3\n"],"metadata":{"id":"RBcA5tbgeTvZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["mkdir federated_learning_blockchain\n","cd federated_learning_blockchain\n"],"metadata":{"id":"w1cM6jEVeXW8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["mkdir contracts\n","cd contracts\n","touch SecureAggregation.sol\n"],"metadata":{"id":"JuXj5YYNeZdL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["// SPDX-License-Identifier: MIT\n","pragma solidity ^0.8.0;\n","\n","contract SecureAggregation {\n","    struct Share {\n","        uint256 nodeId;\n","        uint256[] encryptedShares;\n","    }\n","\n","    Share[] public shares;\n","\n","    event SharesSubmitted(uint256 nodeId);\n","\n","    function submitShares(uint256 _nodeId, uint256[] memory _encryptedShares) public {\n","        shares.push(Share(_nodeId, _encryptedShares));\n","        emit SharesSubmitted(_nodeId);\n","    }\n","\n","    function getShares() public view returns (Share[] memory) {\n","        return shares;\n","    }\n","\n","    function getSharesCount() public view returns (uint256) {\n","        return shares.length;\n","    }\n","\n","    function getShareByIndex(uint256 index) public view returns (uint256, uint256[] memory) {\n","        require(index < shares.length, \"Index out of bounds\");\n","        Share storage share = shares[index];\n","        return (share.nodeId, share.encryptedShares);\n","    }\n","}\n"],"metadata":{"id":"OsB-Gj4hdF9C"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["truffle init\n"],"metadata":{"id":"7XOEedyFefNQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Configure Truffle\n","Edit truffle-config.js to configure the network settings. Uncomment and modify the development network configuration:"],"metadata":{"id":"scjWoucxei8Z"}},{"cell_type":"code","source":["module.exports = {\n","  networks: {\n","    development: {\n","     host: \"127.0.0.1\",\n","     port: 7545,            // Ganache default port\n","     network_id: \"*\"        // Match any network id\n","    },\n","  },\n","  // Other configurations...\n","};\n"],"metadata":{"id":"RnXFgjW4eje6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["truffle compile\n"],"metadata":{"id":"Dc2xfF7eenAx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Step 4: Deploy the Smart Contract to Ganache\n","Set Up Ganache\n","Start Ganache:\n","\n","Open Ganache application.\n","Create a new workspace or quickstart.\n","Note the RPC Server Address:\n","\n","Typically, it's HTTP://127.0.0.1:7545.\n","Create Deployment Script\n","Create a new file migrations/2_deploy_contracts.js:"],"metadata":{"id":"S-oKILFLep3f"}},{"cell_type":"code","source":["const SecureAggregation = artifacts.require(\"SecureAggregation\");\n","\n","module.exports = function (deployer) {\n","  deployer.deploy(SecureAggregation);\n","};\n"],"metadata":{"id":"uI4JZkvOervm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Deploy the Contract\n","Run the deployment:"],"metadata":{"id":"_JqbyQFbeu4K"}},{"cell_type":"code","source":["truffle migrate --reset\n"],"metadata":{"id":"Y6-Yx7dYewWp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from web3 import Web3\n","import json\n","\n","# Connect to Ganache\n","ganache_url = \"http://127.0.0.1:7545\"  # Replace if different\n","web3 = Web3(Web3.HTTPProvider(ganache_url))\n","\n","# Check connection\n","if web3.isConnected():\n","    print(\"Connected to Ganache\")\n","else:\n","    print(\"Connection failed\")\n"],"metadata":{"id":"uu8BGrIVezeS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Replace with your contract's ABI and address\n","contract_address = '0xYourContractAddress'  # Replace with your contract's address\n","with open('SecureAggregationABI.json') as f:\n","    contract_abi = json.load(f)\n","\n","# Create contract instance\n","contract = web3.eth.contract(address=contract_address, abi=contract_abi)\n"],"metadata":{"id":"pWnZ6MtNe2uc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Use the first account from Ganache\n","account = web3.eth.accounts[0]\n"],"metadata":{"id":"s3I8ws8Re6RX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Get total number of shares submitted\n","shares_count = contract.functions.getSharesCount().call()\n","print(f\"Total shares submitted: {shares_count}\")\n","\n","# Retrieve shares\n","for index in range(shares_count):\n","    node_id, shares = contract.functions.getShareByIndex(index).call()\n","    print(f\"Node ID: {node_id}, Shares: {shares}\")\n"],"metadata":{"id":"6KvaA0H3e-gK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Incorporate into Your Federated Learning Workflow\n","Now, integrate this interaction into your federated learning code.\n","\n","Submitting Encrypted Shares from Nodes"],"metadata":{"id":"WCd3gZgtfDGt"}},{"cell_type":"code","source":["# Assuming encrypted_shares_list is a list of encrypted shares from all nodes\n","for node_id, encrypted_shares in enumerate(encrypted_shares_list):\n","    # Convert encrypted shares to integers if necessary\n","    encrypted_shares_int = [int(str(share.ciphertext())) for share in encrypted_shares]\n","\n","    # Submit shares to the contract\n","    tx_hash = contract.functions.submitShares(node_id, encrypted_shares_int).transact({'from': account})\n","    web3.eth.waitForTransactionReceipt(tx_hash)\n","    print(f\"Node {node_id} shares submitted.\")\n"],"metadata":{"id":"EgrEgDTGfFLM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Retrieve all shares\n","shares_count = contract.functions.getSharesCount().call()\n","aggregated_encrypted_shares = []\n","\n","for i in range(MATRIX_SIZE[0] * MATRIX_SIZE[1]):  # For each element in the matrix\n","    element_shares = []\n","    for index in range(shares_count):\n","        _, shares = contract.functions.getShareByIndex(index).call()\n","        element_shares.append(shares[i])  # Get the i-th share from each node\n","\n","    # Sum the encrypted shares\n","    element_sum = sum([public_key.raw_encrypt(share, 0)[0] for share in element_shares])\n","    aggregated_encrypted_shares.append(element_sum)\n"],"metadata":{"id":"yqCZq-MPfHgC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Decrypt the aggregated shares\n","aggregated_weights = [private_key.decrypt(paillier.EncryptedNumber(public_key, value)) / 1e6 for value in aggregated_encrypted_shares]\n","\n","# Convert to tensor\n","global_model_weights = torch.tensor(aggregated_weights).view(MATRIX_SIZE)\n","\n","print(\"Global model weights updated.\")\n"],"metadata":{"id":"OIQIK0zCfK1X"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Example encrypted shares (integers)\n","encrypted_shares = [123456789, 987654321, 192837465]  # Replace with actual encrypted shares\n","\n","# Transaction to submit shares\n","tx_hash = contract.functions.submitShares(1, encrypted_shares).transact({'from': account})\n","receipt = web3.eth.waitForTransactionReceipt(tx_hash)\n","\n","print(\"Shares submitted, transaction receipt:\")\n","print(receipt)\n"],"metadata":{"id":"H-RfI8RJe8Vo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Step 5: Quantum Key Distribution (QKD)\n","Use QKD to securely share encryption keys among nodes."],"metadata":{"id":"yBRkXG76dKoB"}},{"cell_type":"code","source":["import random\n","\n","# BB84-inspired QKD simulation\n","def generate_qkd_keys(num_keys):\n","    \"\"\"Simulate QKD to generate quantum-safe encryption keys.\"\"\"\n","    keys = [random.getrandbits(128) for _ in range(num_keys)]  # 128-bit keys\n","    return keys\n","\n","# Generate QKD keys for all nodes\n","qkd_keys = generate_qkd_keys(NUM_NODES)\n","\n","print(\"Quantum-safe keys generated using QKD.\")\n"],"metadata":{"id":"3y_HYQrWdMe5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Step 6: Secure Aggregation\n","The blockchain performs aggregation on encrypted data using the smart contract."],"metadata":{"id":"nsnM1_6hdPLc"}},{"cell_type":"code","source":["# Retrieve shares from the blockchain\n","shares = contract.functions.getShares().call()\n","\n","# Aggregate encrypted shares\n","aggregated_encrypted_weights = []\n","for i in range(MATRIX_SIZE[0] * MATRIX_SIZE[1]):  # Flattened matrix\n","    element_sum = sum(share[\"encryptedShares\"][i] for share in shares)\n","    aggregated_encrypted_weights.append(element_sum)\n","\n","# Decrypt aggregated weights\n","aggregated_weights = [private_key.decrypt(value) / 1e6 for value in aggregated_encrypted_weights]\n","global_model_weights = torch.tensor(aggregated_weights).view(MATRIX_SIZE)\n","\n","print(\"Global model weights after secure aggregation:\")\n","print(global_model_weights)\n"],"metadata":{"id":"FkbBj42kdQoc"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Step 7: Model Update and Iteration\n","Update the global model and redistribute it to nodes for the next training round."],"metadata":{"id":"kzCV06ZRdVMO"}},{"cell_type":"code","source":["# Redistribute global model weights to nodes\n","node_weights = [global_model_weights.clone() for _ in range(NUM_NODES)]\n","\n","print(\"Global model updated and redistributed for the next round.\")\n"],"metadata":{"id":"_wF1pwR2dWt3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **NEW**"],"metadata":{"id":"iNR_3VI2DjGA"}},{"cell_type":"markdown","source":["Step 1: Local Model Training\n","What It Does:\n","\n","Each of the 1000 nodes trains a machine learning model locally on its private dataset, generating updates (weight matrices, Wi).\n","Why:\n","\n","This ensures data privacy since raw data never leaves the nodes.\n","Local training reflects the decentralized nature of federated learning.\n","Details:\n","\n","Nodes initialize random weight matrices (Wi) as a starting point. These weights will be updated and aggregated later."],"metadata":{"id":"e0Go8OvkDlZh"}},{"cell_type":"code","source":["# Initialize random weights for nodes\n","node_weights = [torch.rand(MATRIX_SIZE) for _ in range(NUM_NODES)]\n","print(f\"Initialized weights for {NUM_NODES} nodes.\")\n"],"metadata":{"id":"bPb4WqrTDmQf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Step 2: Hybrid Encryption\n","This combines Shamir's Secret Sharing (MPC) and Homomorphic Encryption (CKKS) to securely share and process updates.\n","\n","2.1: Shamir‚Äôs Secret Sharing\n","What It Does:\n","\n","Splits each node‚Äôs weight matrix into random shares using Shamir's Secret Sharing, distributing them among other nodes.\n","A threshold (k) of shares is required to reconstruct the original data.\n","Why:\n","\n","Protects individual node updates even if some shares are compromised.\n","Adds a layer of fault tolerance.\n","Details:\n","\n","Each weight matrix is broken into shares (n total shares, with k needed to reconstruct).\n","This ensures that no single node holds the complete data."],"metadata":{"id":"CABqNJ-lDopj"}},{"cell_type":"code","source":["def shamir_split(secret, n, k, prime=PRIME):\n","    coeffs = [secret] + [random.randint(0, prime - 1) for _ in range(k - 1)]\n","    shares = [(i, sum(c * (i ** j) for j, c in enumerate(coeffs)) % prime) for i in range(1, n + 1)]\n","    return shares\n"],"metadata":{"id":"_S1PfOpYDr5W"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["2.2: CKKS Homomorphic Encryption\n","What It Does:\n","\n","Encrypts the shares using CKKS Homomorphic Encryption, allowing computations (e.g., summation) directly on encrypted data without decryption.\n","Why:\n","\n","Prevents exposure of sensitive updates during aggregation.\n","CKKS is computationally lighter than schemes like Paillier, making it suitable for large-scale systems.\n","Details:\n","\n","Each share is encrypted using CKKS and sent to the blockchain."],"metadata":{"id":"F1i7JmfqDtl4"}},{"cell_type":"code","source":["import tenseal as ts\n","\n","context = ts.context(ts.SCHEME_TYPE.CKKS, poly_modulus_degree=8192, coeff_mod_bit_sizes=[60, 40, 40, 60])\n","context.global_scale = 2**40\n","\n","# Encrypt weights\n","encrypted_shares = []\n","for shares in node_shares:\n","    encrypted_batch = []\n","    for share in shares:\n","        share_values = [y for _, y in share]\n","        encrypted_batch.append(ts.ckks_vector(context, share_values))\n","    encrypted_shares.append(encrypted_batch)\n","\n","print(\"Weights encrypted using CKKS encryption.\")\n"],"metadata":{"id":"DuJiDG3-DxGV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Step 3: Qhash Integration\n","What It Does:\n","\n","Each encrypted share is hashed using Qhash to generate a unique identifier.\n","Only the Qhash is stored on the blockchain, reducing storage requirements.\n","Why:\n","\n","Ensures data integrity and immutability.\n","Reduces the blockchain's data footprint.\n","Details:\n","\n","Nodes hash their encrypted updates and store only the hash (not the full encrypted data) on the blockchain."],"metadata":{"id":"ldweKYzyDzey"}},{"cell_type":"code","source":["def qhash(data):\n","    return sha256(data.encode()).hexdigest()\n","\n","# Batch Qhashes for storage on the blockchain\n","for batch_start in range(0, NUM_NODES, BATCH_SIZE):\n","    batch_end = min(batch_start + BATCH_SIZE, NUM_NODES)\n","    batch_hashes = []\n","\n","    for node_id in range(batch_start, batch_end):\n","        share_data = str([str(share.serialize()) for share in encrypted_shares[node_id]])\n","        batch_hashes.append(qhash(share_data))\n","\n","    blockchain.append({\"batch_start\": batch_start, \"batch_end\": batch_end, \"hashes\": batch_hashes})\n"],"metadata":{"id":"WKjapItdD1OV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Step 4: Adaptive Federated Learning\n","What It Does:\n","\n","Aggregates updates using a weighted average based on nodes‚Äô data quality and compute power.\n","Why:\n","\n","Ensures fairness by allowing high-quality or high-capability nodes to contribute more.\n","Details:\n","\n","Each node is assigned a weight (factor) based on its quality or performance.\n","The global model is updated using a weighted average."],"metadata":{"id":"8fkMAKQND4C9"}},{"cell_type":"code","source":["# Weighted averaging for global aggregation\n","def weighted_average(weights, factors):\n","    total_factor = sum(factors)\n","    weighted_sum = sum(w * f for w, f in zip(weights, factors))\n","    return weighted_sum / total_factor\n","\n","global_model = weighted_average(node_weights, node_weights_factors)\n"],"metadata":{"id":"KZFtjImBD51l"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Step 5: Blockchain Integration with On-Chain Aggregation\n","What It Does:\n","\n","Batches of Qhashes are stored on the blockchain.\n","Aggregation is performed directly on-chain using a smart contract.\n","Why:\n","\n","Reduces reliance on the master node for aggregation, improving decentralization.\n","Ensures transparency and auditability.\n","Details:\n","\n","A smart contract manages batched Qhashes and performs secure aggregation."],"metadata":{"id":"ZPD59ckVD9zY"}},{"cell_type":"code","source":["pragma solidity ^0.8.0;\n","\n","contract SecureAggregation {\n","    struct Batch {\n","        uint256 batchStart;\n","        uint256 batchEnd;\n","        bytes[] encryptedHashes;\n","    }\n","\n","    Batch[] public batches;\n","\n","    function submitBatch(uint256 _batchStart, uint256 _batchEnd, bytes[] memory _encryptedHashes) public {\n","        batches.push(Batch(_batchStart, _batchEnd, _encryptedHashes));\n","    }\n","\n","    function aggregate() public view returns (bytes memory) {\n","        // Placeholder for aggregation logic\n","    }\n","}\n"],"metadata":{"id":"FLZEG2MDD_ka"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from web3 import Web3\n","\n","web3 = Web3(Web3.HTTPProvider(\"http://127.0.0.1:7545\"))\n","contract_address = \"0xYourContractAddress\"\n","contract_abi = [...]  # Contract ABI\n","\n","contract = web3.eth.contract(address=contract_address, abi=contract_abi)\n","for batch in blockchain:\n","    tx = contract.functions.submitBatch(batch[\"batch_start\"], batch[\"batch_end\"], batch[\"hashes\"]).transact()\n","    web3.eth.waitForTransactionReceipt(tx)\n","\n","print(\"Batches submitted to the blockchain.\")\n"],"metadata":{"id":"iqsFCxGhEBrK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Step 6: Decryption and Redistribution\n","What It Does:\n","\n","The master node decrypts the aggregated global model and redistributes it to all nodes.\n","Why:\n","\n","Completes the federated learning cycle for the next training round.\n","Details:\n","\n","Decrypted global weights are sent to nodes for local updates."],"metadata":{"id":"EKJXls9dEEuS"}},{"cell_type":"code","source":["# Decrypt the global model and distribute back to nodes\n","global_model_weights = [ts.ckks_vector(context, global_model).decrypt() for _ in range(NUM_NODES)]\n","print(\"Global model weights redistributed to nodes.\")\n"],"metadata":{"id":"Osn2_GT3EIsx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Adapting the hierarchical QKD-FL architecture**"],"metadata":{"id":"GP7TRUcUoUBf"}},{"cell_type":"markdown","source":["Notebook Structure\n","\n","Setup and Initialization\n","\n","Local Model Training\n","\n","Hybrid Encryption (MPC + CKKS)\n","\n","QKD Integration Using Hierarchical QKD-FL Architecture\n","\n","Qhash for Integrity\n","\n","Blockchain Integration\n","\n","Adaptive Federated Learning\n","\n","On-Chain Aggregation\n","\n","Decryption and Redistribution"],"metadata":{"id":"1Hkw0y7voYvS"}},{"cell_type":"code","source":["!pip install phe\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xQhyUMSfsr66","executionInfo":{"status":"ok","timestamp":1732276050960,"user_tz":-120,"elapsed":4034,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"3ed36223-f387-4353-f088-37b92373234e"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting phe\n","  Downloading phe-1.5.0-py2.py3-none-any.whl.metadata (3.8 kB)\n","Downloading phe-1.5.0-py2.py3-none-any.whl (53 kB)\n","\u001b[?25l   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m0.0/53.7 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m53.7/53.7 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: phe\n","Successfully installed phe-1.5.0\n"]}]},{"cell_type":"code","source":["!pip install tenseal\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Df1Yd6Bgs1EE","executionInfo":{"status":"ok","timestamp":1732276088477,"user_tz":-120,"elapsed":4885,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"4bfee42d-355e-475e-8ef4-e4eb3222e961"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting tenseal\n","  Downloading tenseal-0.3.15-cp310-cp310-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (8.2 kB)\n","Downloading tenseal-0.3.15-cp310-cp310-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl (4.8 MB)\n","\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m4.8/4.8 MB\u001b[0m \u001b[31m34.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: tenseal\n","Successfully installed tenseal-0.3.15\n"]}]},{"cell_type":"code","source":["import torch\n","from hashlib import sha256\n","from sympy import mod_inverse\n","from phe import paillier\n","import tenseal as ts\n","import random\n","\n","# Constants\n","NUM_NODES = 10\n","MATRIX_SIZE = (3, 3)\n","PRIME = 104729  # Prime number for Shamir's Secret Sharing\n","THRESHOLD = 3  # Threshold for reconstruction in MPC\n","BATCH_SIZE = 10  # Batch size for blockchain transactions\n","\n","# Blockchain mock\n","blockchain = []\n","\n","# Qhash implementation (simulated)\n","def qhash(data):\n","    return sha256(data.encode()).hexdigest()\n","\n","# CKKS Context for homomorphic encryption\n","context = ts.context(ts.SCHEME_TYPE.CKKS, poly_modulus_degree=8192, coeff_mod_bit_sizes=[60, 40, 40, 60])\n","context.global_scale = 2**40\n","\n","print(\"Setup complete.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Sd898ON6oVf1","executionInfo":{"status":"ok","timestamp":1732276090227,"user_tz":-120,"elapsed":433,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"98593f88-fb9b-4ec4-d380-6786af1c95aa"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Setup complete.\n"]}]},{"cell_type":"code","source":["# Initialize random weights for nodes\n","node_weights = [torch.rand(MATRIX_SIZE) for _ in range(NUM_NODES)]\n","print(f\"Initialized weights for {NUM_NODES} nodes.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XlCGXYxworDr","executionInfo":{"status":"ok","timestamp":1732276094681,"user_tz":-120,"elapsed":279,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"90f3b0ed-218a-4c46-f819-4f981737f723"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Initialized weights for 10 nodes.\n"]}]},{"cell_type":"markdown","source":["Hybrid Encryption (MPC + CKKS)"],"metadata":{"id":"BsVpXbaAote0"}},{"cell_type":"code","source":["# Shamir's Secret Sharing\n","def shamir_split(secret, n, k, prime=PRIME):\n","    coeffs = [secret] + [random.randint(0, prime - 1) for _ in range(k - 1)]\n","    shares = [(i, sum(c * (i ** j) for j, c in enumerate(coeffs)) % prime) for i in range(1, n + 1)]\n","    return shares\n","\n","# Split weights into shares\n","node_shares = []\n","for weights in node_weights:\n","    shares = [shamir_split(int(value.item() * 1e6), NUM_NODES, THRESHOLD, PRIME) for value in weights.view(-1)]\n","    node_shares.append(shares)\n"],"metadata":{"id":"VS5gZipdou2-","executionInfo":{"status":"ok","timestamp":1732276098253,"user_tz":-120,"elapsed":369,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# Encrypt weights using CKKS\n","encrypted_shares = []\n","for shares in node_shares:\n","    encrypted_batch = []\n","    for share in shares:\n","        share_values = [y for _, y in share]\n","        encrypted_batch.append(ts.ckks_vector(context, share_values))\n","    encrypted_shares.append(encrypted_batch)\n","\n","print(\"Weights encrypted using CKKS encryption.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W54CpyP2oyI6","executionInfo":{"status":"ok","timestamp":1732276102074,"user_tz":-120,"elapsed":1257,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"ede8fda6-2ae4-4d31-84af-537f5ecb34ab"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Weights encrypted using CKKS encryption.\n"]}]},{"cell_type":"markdown","source":["4. QKD Integration Using Hierarchical QKD-FL Architecture\n"],"metadata":{"id":"UeNQh0ojo3iF"}},{"cell_type":"code","source":["# Simulate QKD resource allocation\n","def simulate_qkd_resources(num_nodes):\n","    # Randomly allocate QKD keys and bandwidth\n","    qkd_resources = {}\n","    for i in range(num_nodes):\n","        qkd_resources[i] = {\n","            \"key_rate\": random.uniform(1, 10),  # Keys generated per second\n","            \"bandwidth\": random.uniform(50, 100),  # Mbps\n","        }\n","    return qkd_resources\n","\n","# Generate QKD resources for all nodes\n","qkd_resources = simulate_qkd_resources(NUM_NODES)\n","print(\"QKD resources allocated.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IbVg6Ne-o4vM","executionInfo":{"status":"ok","timestamp":1732276106177,"user_tz":-120,"elapsed":259,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"3ab7e8a2-4861-4ead-8292-85b3b652f210"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["QKD resources allocated.\n"]}]},{"cell_type":"markdown","source":["Hierarchical Management of QKD\n"],"metadata":{"id":"tf6E47fio9C9"}},{"cell_type":"code","source":["# Simulated QKD network manager\n","def qkd_network_manager(node_id, qkd_resources):\n","    # Adaptive routing and key distribution\n","    resource = qkd_resources[node_id]\n","    return {\n","        \"key_rate\": resource[\"key_rate\"],\n","        \"bandwidth\": resource[\"bandwidth\"],\n","    }\n","\n","# Example usage for Node 1\n","node_1_qkd = qkd_network_manager(1, qkd_resources)\n","print(f\"Node 1 QKD Resources: {node_1_qkd}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uLDm9KSro-2I","executionInfo":{"status":"ok","timestamp":1732276110099,"user_tz":-120,"elapsed":264,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"d368c989-b4fb-418d-d261-bdfb3231e2e2"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Node 1 QKD Resources: {'key_rate': 6.844278244811333, 'bandwidth': 76.72931773403494}\n"]}]},{"cell_type":"markdown","source":["5. Qhash for Integrity\n"],"metadata":{"id":"jI11PhgrpBtt"}},{"cell_type":"code","source":["# Batch Qhashes for storage on the blockchain\n","for batch_start in range(0, NUM_NODES, BATCH_SIZE):\n","    batch_end = min(batch_start + BATCH_SIZE, NUM_NODES)\n","    batch_hashes = []\n","\n","    for node_id in range(batch_start, batch_end):\n","        share_data = str([str(share.serialize()) for share in encrypted_shares[node_id]])\n","        batch_hashes.append(qhash(share_data))\n","\n","    blockchain.append({\"batch_start\": batch_start, \"batch_end\": batch_end, \"hashes\": batch_hashes})\n","\n","print(\"Qhashes stored on the blockchain.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"57yBWufSpChu","executionInfo":{"status":"ok","timestamp":1732276117275,"user_tz":-120,"elapsed":2406,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"3ce57b60-65b3-44a5-f9bb-265c3990a3ae"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Qhashes stored on the blockchain.\n"]}]},{"cell_type":"markdown","source":["6. Blockchain Integration\n"],"metadata":{"id":"pCfcnUJFpEow"}},{"cell_type":"code","source":["!pip install web3\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uh250wFBtE62","executionInfo":{"status":"ok","timestamp":1732276159921,"user_tz":-120,"elapsed":11192,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"3b544ffd-66ef-4b5c-dd95-118436186143"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting web3\n","  Downloading web3-7.5.0-py3-none-any.whl.metadata (5.4 kB)\n","Collecting eth-abi>=5.0.1 (from web3)\n","  Downloading eth_abi-5.1.0-py3-none-any.whl.metadata (5.1 kB)\n","Collecting eth-account>=0.13.1 (from web3)\n","  Downloading eth_account-0.13.4-py3-none-any.whl.metadata (5.3 kB)\n","Collecting eth-hash>=0.5.1 (from eth-hash[pycryptodome]>=0.5.1->web3)\n","  Downloading eth_hash-0.7.0-py3-none-any.whl.metadata (5.4 kB)\n","Collecting eth-typing>=5.0.0 (from web3)\n","  Downloading eth_typing-5.0.1-py3-none-any.whl.metadata (5.1 kB)\n","Collecting eth-utils>=5.0.0 (from web3)\n","  Downloading eth_utils-5.1.0-py3-none-any.whl.metadata (5.3 kB)\n","Collecting hexbytes>=1.2.0 (from web3)\n","  Downloading hexbytes-1.2.1-py3-none-any.whl.metadata (3.7 kB)\n","Requirement already satisfied: aiohttp>=3.7.4.post0 in /usr/local/lib/python3.10/dist-packages (from web3) (3.11.2)\n","Requirement already satisfied: pydantic>=2.4.0 in /usr/local/lib/python3.10/dist-packages (from web3) (2.9.2)\n","Requirement already satisfied: requests>=2.23.0 in /usr/local/lib/python3.10/dist-packages (from web3) (2.32.3)\n","Requirement already satisfied: typing-extensions>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from web3) (4.12.2)\n","Collecting types-requests>=2.0.0 (from web3)\n","  Downloading types_requests-2.32.0.20241016-py3-none-any.whl.metadata (1.9 kB)\n","Collecting websockets>=10.0.0 (from web3)\n","  Downloading websockets-14.1-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.7 kB)\n","Collecting pyunormalize>=15.0.0 (from web3)\n","  Downloading pyunormalize-16.0.0-py3-none-any.whl.metadata (4.0 kB)\n","Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp>=3.7.4.post0->web3) (2.4.3)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp>=3.7.4.post0->web3) (1.3.1)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp>=3.7.4.post0->web3) (24.2.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp>=3.7.4.post0->web3) (1.5.0)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp>=3.7.4.post0->web3) (6.1.0)\n","Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp>=3.7.4.post0->web3) (0.2.0)\n","Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp>=3.7.4.post0->web3) (1.17.2)\n","Requirement already satisfied: async-timeout<6.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp>=3.7.4.post0->web3) (4.0.3)\n","Collecting parsimonious<0.11.0,>=0.10.0 (from eth-abi>=5.0.1->web3)\n","  Downloading parsimonious-0.10.0-py3-none-any.whl.metadata (25 kB)\n","Collecting bitarray>=2.4.0 (from eth-account>=0.13.1->web3)\n","  Downloading bitarray-3.0.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (32 kB)\n","Collecting eth-keyfile<0.9.0,>=0.7.0 (from eth-account>=0.13.1->web3)\n","  Downloading eth_keyfile-0.8.1-py3-none-any.whl.metadata (8.5 kB)\n","Collecting eth-keys>=0.4.0 (from eth-account>=0.13.1->web3)\n","  Downloading eth_keys-0.6.0-py3-none-any.whl.metadata (13 kB)\n","Collecting eth-rlp>=2.1.0 (from eth-account>=0.13.1->web3)\n","  Downloading eth_rlp-2.1.0-py3-none-any.whl.metadata (4.6 kB)\n","Collecting rlp>=1.0.0 (from eth-account>=0.13.1->web3)\n","  Downloading rlp-4.0.1-py3-none-any.whl.metadata (4.6 kB)\n","Collecting ckzg>=2.0.0 (from eth-account>=0.13.1->web3)\n","  Downloading ckzg-2.0.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (683 bytes)\n","Collecting pycryptodome<4,>=3.6.6 (from eth-hash[pycryptodome]>=0.5.1->web3)\n","  Downloading pycryptodome-3.21.0-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.4 kB)\n","Collecting cytoolz>=0.10.1 (from eth-utils>=5.0.0->web3)\n","  Downloading cytoolz-1.0.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.5 kB)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.4.0->web3) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.23.4 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.4.0->web3) (2.23.4)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.23.0->web3) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.23.0->web3) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.23.0->web3) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.23.0->web3) (2024.8.30)\n","Requirement already satisfied: toolz>=0.8.0 in /usr/local/lib/python3.10/dist-packages (from cytoolz>=0.10.1->eth-utils>=5.0.0->web3) (0.12.1)\n","Requirement already satisfied: regex>=2022.3.15 in /usr/local/lib/python3.10/dist-packages (from parsimonious<0.11.0,>=0.10.0->eth-abi>=5.0.1->web3) (2024.9.11)\n","Downloading web3-7.5.0-py3-none-any.whl (1.3 MB)\n","\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m21.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading eth_abi-5.1.0-py3-none-any.whl (29 kB)\n","Downloading eth_account-0.13.4-py3-none-any.whl (581 kB)\n","\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m581.4/581.4 kB\u001b[0m \u001b[31m33.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading eth_hash-0.7.0-py3-none-any.whl (8.7 kB)\n","Downloading eth_typing-5.0.1-py3-none-any.whl (20 kB)\n","Downloading eth_utils-5.1.0-py3-none-any.whl (100 kB)\n","\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m100.5/100.5 kB\u001b[0m \u001b[31m7.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading hexbytes-1.2.1-py3-none-any.whl (5.2 kB)\n","Downloading pyunormalize-16.0.0-py3-none-any.whl (49 kB)\n","\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m49.2/49.2 kB\u001b[0m \u001b[31m3.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading types_requests-2.32.0.20241016-py3-none-any.whl (15 kB)\n","Downloading websockets-14.1-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (168 kB)\n","\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m168.2/168.2 kB\u001b[0m \u001b[31m12.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading bitarray-3.0.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (278 kB)\n","\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m278.3/278.3 kB\u001b[0m \u001b[31m19.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading ckzg-2.0.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (168 kB)\n","\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m168.9/168.9 kB\u001b[0m \u001b[31m10.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading cytoolz-1.0.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.0 MB)\n","\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m58.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading eth_keyfile-0.8.1-py3-none-any.whl (7.5 kB)\n","Downloading eth_keys-0.6.0-py3-none-any.whl (21 kB)\n","Downloading eth_rlp-2.1.0-py3-none-any.whl (5.1 kB)\n","Downloading parsimonious-0.10.0-py3-none-any.whl (48 kB)\n","\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m48.4/48.4 kB\u001b[0m \u001b[31m3.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pycryptodome-3.21.0-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.3 MB)\n","\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m2.3/2.3 MB\u001b[0m \u001b[31m61.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading rlp-4.0.1-py3-none-any.whl (20 kB)\n","Installing collected packages: ckzg, bitarray, websockets, types-requests, pyunormalize, pycryptodome, parsimonious, hexbytes, eth-typing, eth-hash, cytoolz, eth-utils, rlp, eth-keys, eth-abi, eth-rlp, eth-keyfile, eth-account, web3\n","Successfully installed bitarray-3.0.0 ckzg-2.0.1 cytoolz-1.0.0 eth-abi-5.1.0 eth-account-0.13.4 eth-hash-0.7.0 eth-keyfile-0.8.1 eth-keys-0.6.0 eth-rlp-2.1.0 eth-typing-5.0.1 eth-utils-5.1.0 hexbytes-1.2.1 parsimonious-0.10.0 pycryptodome-3.21.0 pyunormalize-16.0.0 rlp-4.0.1 types-requests-2.32.0.20241016 web3-7.5.0 websockets-14.1\n"]}]},{"cell_type":"code","source":["!npm install -g truffle\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gHxO4ST7ub15","executionInfo":{"status":"ok","timestamp":1732276604339,"user_tz":-120,"elapsed":95679,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"223e1828-2e49-40f7-b5e5-2a7f1c83f65d"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m rimraf@2.7.1: Rimraf versions prior to v4 are no longer supported\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m mkdirp-promise@5.0.1: This package is broken and no longer maintained. 'mkdirp' itself supports promises now, please switch to that.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m apollo-datasource@3.3.2: The `apollo-datasource` package is part of Apollo Server v2 and v3, which are now end-of-life (as of October 22nd 2023 and October 22nd 2024, respectively). See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m apollo-server-plugin-base@3.7.2: The `apollo-server-plugin-base` package is part of Apollo Server v2 and v3, which are now end-of-life (as of October 22nd 2023 and October 22nd 2024, respectively). This package's functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m apollo-server-types@3.8.0: The `apollo-server-types` package is part of Apollo Server v2 and v3, which are now end-of-life (as of October 22nd 2023 and October 22nd 2024, respectively). This package's functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m apollo-server-errors@3.3.1: The `apollo-server-errors` package is part of Apollo Server v2 and v3, which are now end-of-life (as of October 22nd 2023 and October 22nd 2024, respectively). This package's functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @truffle/promise-tracker@0.1.7: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m testrpc@0.0.1: testrpc has been renamed to ganache-cli, please use this package from now on.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @truffle/dashboard-message-bus-common@0.1.7: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @truffle/source-map-utils@1.3.119: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @truffle/provider@0.3.13: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @truffle/spinners@0.2.5: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @truffle/error@0.2.2: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @truffle/db-loader@0.2.36: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m apollo-server@3.13.0: The `apollo-server` package is part of Apollo Server v2 and v3, which are now end-of-life (as of October 22nd 2023 and October 22nd 2024, respectively). This package's functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m apollo-server-env@4.2.1: The `apollo-server-env` package is part of Apollo Server v2 and v3, which are now end-of-life (as of October 22nd 2023 and October 22nd 2024, respectively). This package's functionality is now found in the `@apollo/utils.fetcher` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @truffle/events@0.1.25: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m multicodec@0.5.7: This module has been superseded by the multiformats module\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m uuid@3.4.0: Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @truffle/code-utils@3.0.4: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @truffle/dashboard-message-bus-client@0.1.12: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m multicodec@1.0.4: This module has been superseded by the multiformats module\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m uuid@2.0.1: Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @truffle/config@1.3.61: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m multibase@0.7.0: This module has been superseded by the multiformats module\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @truffle/abi-utils@1.0.3: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m har-validator@5.1.5: this library is no longer supported\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m glob@7.2.0: Glob versions prior to v9 are no longer supported\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @truffle/compile-common@0.9.8: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m inflight@1.0.6: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m apollo-server-express@3.13.0: The `apollo-server-express` package is part of Apollo Server v2 and v3, which are now end-of-life (as of October 22nd 2023 and October 22nd 2024, respectively). This package's functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m multibase@0.6.1: This module has been superseded by the multiformats module\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m apollo-reporting-protobuf@3.4.0: The `apollo-reporting-protobuf` package is part of Apollo Server v2 and v3, which are now end-of-life (as of October 22nd 2023 and October 22nd 2024, respectively). This package's functionality is now found in the `@apollo/usage-reporting-protobuf` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @truffle/interface-adapter@0.5.37: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @ensdomains/ens@0.4.5: Please use @ensdomains/ens-contracts\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m cids@0.7.5: This module has been superseded by the multiformats module\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m apollo-server-core@3.13.0: The `apollo-server-core` package is part of Apollo Server v2 and v3, which are now end-of-life (as of October 22nd 2023 and October 22nd 2024, respectively). This package's functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @ensdomains/resolver@0.2.4: Please use @ensdomains/ens-contracts\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @truffle/debugger@12.1.5: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @truffle/db@2.0.36: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\n","\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35mdeprecated\u001b[0m @truffle/codec@0.17.3: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\n","\u001b[K\u001b[?25h\n","added 1156 packages, and audited 1186 packages in 2m\n","\n","95 packages are looking for funding\n","  run `npm fund` for details\n","\n","\u001b[31m\u001b[1m62\u001b[22m\u001b[39m vulnerabilities (22 \u001b[1mlow\u001b[22m, 19 \u001b[33m\u001b[1mmoderate\u001b[22m\u001b[39m, 20 \u001b[31m\u001b[1mhigh\u001b[22m\u001b[39m, 1 \u001b[35m\u001b[1mcritical\u001b[22m\u001b[39m)\n","\n","To address issues that do not require attention, run:\n","  npm audit fix\n","\n","To address all issues (including breaking changes), run:\n","  npm audit fix --force\n","\n","Run `npm audit` for details.\n"]}]},{"cell_type":"code","source":["!mkdir federated_learning_blockchain\n","!cd federated_learning_blockchain\n","!truffle init\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W1PZdOS1vJJa","executionInfo":{"status":"ok","timestamp":1732276706548,"user_tz":-120,"elapsed":2293,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"a0da8354-97bf-4c4b-9778-0dc4a61a4d86"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Starting init...\n","================\n","\n","> Copying project files to /content\n","\n","Init successful, sweet!\n","\n","Try our scaffold commands to get started:\n","  $ truffle create contract YourContractName # scaffold a contract\n","  $ truffle create test YourTestName         # scaffold a test\n","\n","http://trufflesuite.com/docs\n","\n"]}]},{"cell_type":"code","source":["!truffle compile\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZGc_QHWfvtbY","executionInfo":{"status":"ok","timestamp":1732277758537,"user_tz":-120,"elapsed":26769,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"66911ed6-a6b7-495d-86e1-e0ce2bea0fde"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Compiling your contracts...\n","===========================\n","> Everything is up to date, there is nothing to compile.\n"]}]},{"cell_type":"code","source":["!truffle migrate --network development\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O2ytQtuZz6jE","executionInfo":{"status":"ok","timestamp":1732277975960,"user_tz":-120,"elapsed":31073,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"744f42e1-67af-472a-89b3-3f388ef3a910"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Compiling your contracts...\n","===========================\n","> Everything is up to date, there is nothing to compile.\n","> Something went wrong while attempting to connect to the network at http://127.0.0.1:8545. Check your network configuration.\n","CONNECTION ERROR: Couldn't connect to node http://127.0.0.1:8545.\n","Truffle v5.11.5 (core: 5.11.5)\n","Node v16.20.2\n"]}]},{"cell_type":"code","source":["!truffle migrate\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yBMEATe9wSOY","executionInfo":{"status":"ok","timestamp":1732277793510,"user_tz":-120,"elapsed":30764,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"4534be85-19ac-4b12-bca9-70785bf99ff9"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Compiling your contracts...\n","===========================\n","> Everything is up to date, there is nothing to compile.\n","> Something went wrong while attempting to connect to the network at http://127.0.0.1:8545. Check your network configuration.\n","CONNECTION ERROR: Couldn't connect to node http://127.0.0.1:8545.\n","Truffle v5.11.5 (core: 5.11.5)\n","Node v16.20.2\n"]}]},{"cell_type":"code","source":["from web3 import Web3\n","\n","# Connect to blockchain (e.g., Ganache)\n","web3 = Web3(Web3.HTTPProvider(\"http://127.0.0.1:7545\"))\n","contract_address = \"0xYourContractAddress\"\n","contract_abi = [...]  # Replace with contract ABI\n","\n","contract = web3.eth.contract(address=contract_address, abi=contract_abi)\n","for batch in blockchain:\n","    tx = contract.functions.submitBatch(batch[\"batch_start\"], batch[\"batch_end\"], batch[\"hashes\"]).transact()\n","    web3.eth.waitForTransactionReceipt(tx)\n","\n","print(\"Batches submitted to the blockchain.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":408},"id":"4snmf7oMpEYk","executionInfo":{"status":"error","timestamp":1732276166273,"user_tz":-120,"elapsed":3751,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"d4de4280-7214-4313-e8d0-d52192cb4c27"},"execution_count":14,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"Could not format invalid value [Ellipsis] as field 'abi'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mWeb3ValueError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/eth_utils/applicators.py\u001b[0m in \u001b[0;36mapply_formatters_to_dict\u001b[0;34m(formatters, value)\u001b[0m\n\u001b[1;32m     96\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 97\u001b[0;31m                 \u001b[0;32myield\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformatters\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     98\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/web3/_utils/normalizers.py\u001b[0m in \u001b[0;36mnormalize_abi\u001b[0;34m(abi)\u001b[0m\n\u001b[1;32m    252\u001b[0m         \u001b[0mabi\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mabi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 253\u001b[0;31m     \u001b[0mvalidate_abi\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mABI\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mabi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    254\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mABI\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mabi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/web3/_utils/validation.py\u001b[0m in \u001b[0;36mvalidate_abi\u001b[0;34m(abi)\u001b[0m\n\u001b[1;32m     79\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mis_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0me\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mabi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 80\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mWeb3ValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"'abi' is not a list of dictionaries\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mWeb3ValueError\u001b[0m: 'abi' is not a list of dictionaries","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-3fbab696ff0e>\u001b[0m in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mcontract_abi\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m...\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# Replace with contract ABI\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mcontract\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mweb3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meth\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontract\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maddress\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcontract_address\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mabi\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcontract_abi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mbatch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mblockchain\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0mtx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcontract\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunctions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubmitBatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"batch_start\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"batch_end\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"hashes\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransact\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/web3/eth/eth.py\u001b[0m in \u001b[0;36mcontract\u001b[0;34m(self, address, **kwargs)\u001b[0m\n\u001b[1;32m    648\u001b[0m         )\n\u001b[1;32m    649\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 650\u001b[0;31m         \u001b[0mContractFactory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mContractFactoryClass\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfactory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mw3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    651\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    652\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0maddress\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/web3/contract/contract.py\u001b[0m in \u001b[0;36mfactory\u001b[0;34m(cls, w3, class_name, **kwargs)\u001b[0m\n\u001b[1;32m    520\u001b[0m         contract = cast(\n\u001b[1;32m    521\u001b[0m             \u001b[0mType\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mSelf\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 522\u001b[0;31m             PropertyCheckingFactory(\n\u001b[0m\u001b[1;32m    523\u001b[0m                 \u001b[0mclass_name\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    524\u001b[0m                 \u001b[0;34m(\u001b[0m\u001b[0mcls\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/web3/_utils/datatypes.py\u001b[0m in \u001b[0;36m__new__\u001b[0;34m(mcs, name, bases, namespace, normalizers)\u001b[0m\n\u001b[1;32m     56\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnormalizers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 58\u001b[0;31m             processed_namespace = apply_formatters_to_dict(\n\u001b[0m\u001b[1;32m     59\u001b[0m                 \u001b[0mnormalizers\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m                 \u001b[0mnamespace\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/eth_utils/functional.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     45\u001b[0m         \u001b[0;34m@\u001b[0m\u001b[0mfunctools\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwraps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# type: ignore\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 47\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/eth_utils/applicators.py\u001b[0m in \u001b[0;36mapply_formatters_to_dict\u001b[0;34m(formatters, value)\u001b[0m\n\u001b[1;32m    100\u001b[0m                     \u001b[0;34mf\"Could not format invalid value {repr(item)} as field {repr(key)}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m                 )\n\u001b[0;32m--> 102\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_error_message\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    103\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m                 new_error_message = (\n","\u001b[0;31mValueError\u001b[0m: Could not format invalid value [Ellipsis] as field 'abi'"]}]},{"cell_type":"markdown","source":["7. Adaptive Federated Learning\n"],"metadata":{"id":"dtfTB7s7pJt4"}},{"cell_type":"code","source":["# Assign weights to nodes based on data quality or compute power\n","node_weights_factors = [random.uniform(0.5, 1.5) for _ in range(NUM_NODES)]\n","\n","# Weighted averaging for global aggregation\n","def weighted_average(weights, factors):\n","    total_factor = sum(factors)\n","    weighted_sum = sum(w * f for w, f in zip(weights, factors))\n","    return weighted_sum / total_factor\n","\n","global_model = weighted_average(node_weights, node_weights_factors)\n"],"metadata":{"id":"JddcLJbPpLDL","executionInfo":{"status":"ok","timestamp":1732276172937,"user_tz":-120,"elapsed":297,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}}},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":["8. On-Chain Aggregation\n"],"metadata":{"id":"ftE3Vh_mpNJP"}},{"cell_type":"code","source":["pragma solidity ^0.8.0;\n","\n","contract SecureAggregation {\n","    struct Batch {\n","        uint256 batchStart;\n","        uint256 batchEnd;\n","        bytes[] encryptedHashes;\n","    }\n","\n","    Batch[] public batches;\n","\n","    function submitBatch(uint256 _batchStart, uint256 _batchEnd, bytes[] memory _encryptedHashes) public {\n","        batches.push(Batch(_batchStart, _batchEnd, _encryptedHashes));\n","    }\n","\n","    function aggregate() public view returns (bytes memory) {\n","        // Placeholder for aggregation logic\n","    }\n","}\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"G0Qe9z7WpOcO","executionInfo":{"status":"error","timestamp":1732276176691,"user_tz":-120,"elapsed":306,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"c7f76134-c2c0-4e1e-9aed-128b1a9df868"},"execution_count":16,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"invalid syntax (<ipython-input-16-707c7667a179>, line 1)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-16-707c7667a179>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    pragma solidity ^0.8.0;\u001b[0m\n\u001b[0m           ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"markdown","source":["9. Decryption and Redistribution\n"],"metadata":{"id":"hx6inP8HpQc2"}},{"cell_type":"code","source":["# Decrypt and distribute the global model\n","global_model_weights = [ts.ckks_vector(context, global_model).decrypt() for _ in range(NUM_NODES)]\n","print(\"Global model weights redistributed.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":321},"id":"5yf45tHupR4f","executionInfo":{"status":"error","timestamp":1732276181832,"user_tz":-120,"elapsed":286,"user":{"displayName":"kwstas dal","userId":"03880415610854644238"}},"outputId":"b3037d33-33c9-4ff6-bda1-4593d302084c"},"execution_count":17,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"can only encrypt a vector","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-ed486923f1df>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Decrypt and distribute the global model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mglobal_model_weights\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mts\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mckks_vector\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcontext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mglobal_model\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecrypt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mNUM_NODES\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Global model weights redistributed.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-17-ed486923f1df>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Decrypt and distribute the global model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mglobal_model_weights\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mts\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mckks_vector\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcontext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mglobal_model\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecrypt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mNUM_NODES\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Global model weights redistributed.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tenseal/__init__.py\u001b[0m in \u001b[0;36mckks_vector\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    100\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mckks_vector\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mCKKSVector\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m     \u001b[0;34m\"\"\"Constructor function for tenseal.CKKSVector\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 102\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mCKKSVector\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    103\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tenseal/tensors/ckksvector.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, context, vector, scale, data)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mvector\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mts\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplain_tensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvector\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"float\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"can only encrypt a vector\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m             \u001b[0mvector\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraw\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: can only encrypt a vector"]}]},{"cell_type":"markdown","source":["Summary\n","\n","Local Model Training: Nodes train models independently.\n","\n","Hybrid Encryption: Protects updates using MPC and CKKS encryption.\n","\n","QKD Integration: Implements hierarchical QKD for secure key distribution.\n","\n","Qhash for Integrity: Ensures data integrity with quantum-resistant hashes.\n","\n","Blockchain Integration: Stores batched Qhashes and handles aggregation on-chain.\n","\n","Adaptive Learning: Weighted contributions ensure fairness and performance.\n","\n","On-Chain Aggregation: Decentralizes aggregation to reduce reliance on the\n","master node.\n","\n","Decryption and Redistribution: Completes the federated learning cycle."],"metadata":{"id":"f0nPH3bCpUNH"}}]}